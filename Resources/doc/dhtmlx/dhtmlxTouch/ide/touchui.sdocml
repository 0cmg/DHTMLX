<?xml version="1.0" encoding="UTF-8"?>
<javascript>
	<class type="dhx">
	    <description>dhx</description>
	    <constructors>
			<constructor scope="static">
		        <description>Creates new instance of dhx.</description>
				<parameters>
		            <parameter name="parent" type="String" usage="required">
		            	<description>Object Constructor</description>
		            </parameter>
		            <parameter name="view" type="String" usage="required">
		            	<description>Common declaration</description>
		            </parameter>
		            <parameter name="skin" type="String" usage="required">
		            	<description>Nested layout</description>
		            </parameter>
		        </parameters>
		        <return-types>
		            <return-type type="dhx"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			<method name="extend" scope="instance">
				<description></description>
				<parameters>
				<parameter name="alphabetical list" type="String" usage="required">
					<description>AttachAccordion - attaches dhtmlxAccordion to cell</description>
				</parameter>
				</parameters>
				<example></example>
			</method>
			<method name="get" scope="instance">
				<description></description>
				<parameters>
				<parameter name="alphabetical list" type="String" usage="required">
					<description>AttachAccordion - attaches dhtmlxAccordion to cell</description>
				</parameter>
				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui">
	    <description>dhx</description>
	    <constructors>
			<constructor scope="static">
		        <description>Creates new instance of dhx.</description>
				<parameters>
		            <parameter name="parent" type="String" usage="required">
		            	<description>Object Constructor</description>
		            </parameter>
		            <parameter name="view" type="String" usage="required">
		            	<description>Common declaration</description>
		            </parameter>
		            <parameter name="skin" type="String" usage="required">
		            	<description>Nested layout</description>
		            </parameter>
		        </parameters>
		        <return-types>
		            <return-type type="dhx"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			<method name="get" scope="instance">
				<description>gets dhx element by id</description>
				<parameters>
					<parameter name="id" type="String" usage="required">
		            	<description>dhx element id</description>
		            </parameter>
		        </parameters>
				<return-types>
					<return-type type="dhx.ui.accordion"/><return-type type="dhx.ui.accordionitem"/><return-type type="dhx.ui.button"/><return-type type="dhx.ui.calendar"/><return-type type="dhx.ui.carousel"/><return-type type="dhx.ui.chart"/><return-type type="dhx.ui.checkbox"/><return-type type="dhx.ui.combo"/><return-type type="dhx.ui.counter"/><return-type type="dhx.ui.dataview"/><return-type type="dhx.ui.datepicker"/><return-type type="dhx.ui.form"/><return-type type="dhx.ui.googlemap"/><return-type type="dhx.ui.grid"/><return-type type="dhx.ui.grouplist"/><return-type type="dhx.ui.icon"/><return-type type="dhx.ui.iframe"/><return-type type="dhx.ui.imagebutton"/><return-type type="dhx.ui.input"/><return-type type="dhx.ui.label"/><return-type type="dhx.ui.layout"/><return-type type="dhx.ui.list"/><return-type type="dhx.ui.multiview"/><return-type type="dhx.ui.pagelist"/><return-type type="dhx.ui.popup"/><return-type type="dhx.ui.radio"/><return-type type="dhx.ui.richselect"/><return-type type="dhx.ui.scrollview"/><return-type type="dhx.ui.segmented"/><return-type type="dhx.ui.select"/><return-type type="dhx.ui.slider"/><return-type type="dhx.ui.tabbar"/><return-type type="dhx.ui.template"/><return-type type="dhx.ui.text"/><return-type type="dhx.ui.textarea"/><return-type type="dhx.ui.toggle"/><return-type type="dhx.ui.toolbar"/><return-type type="dhx.ui.video"/><return-type type="dhx.ui.view"/><return-type type="dhx.ui.window"/><return-type type="dhx.ActiveContent"/><return-type type="dhx.AtomDataLoader"/><return-type type="dhx.AtomRender"/><return-type type="dhx.BaseBind"/><return-type type="dhx.BindSource"/><return-type type="dhx.Canvas"/><return-type type="dhx.CanvasMgr"/><return-type type="dhx.CarouselPanel"/><return-type type="dhx.CollectionBind"/><return-type type="dhx.DataCollection"/><return-type type="dhx.DataDriver"/><return-type type="dhx.DataLoader"/><return-type type="dhx.DataMove"/><return-type type="dhx.DataProcessor"/><return-type type="dhx.DataRecord"/><return-type type="dhx.DataStore"/><return-type type="dhx.DataValue"/><return-type type="dhx.Date"/><return-type type="dhx.Destruction"/><return-type type="dhx.DragControl"/><return-type type="dhx.DragItem"/><return-type type="dhx.EditAbility"/><return-type type="dhx.EventSystem"/><return-type type="dhx.GlobalStore"/><return-type type="dhx.Group"/><return-type type="dhx.GroupStore"/><return-type type="dhx.IdSpace"/><return-type type="dhx.KeyEvents"/><return-type type="dhx.LinkedPanel"/><return-type type="dhx.Modality"/><return-type type="dhx.MouseEvents"/><return-type type="dhx.Movable"/><return-type type="dhx.Number"/><return-type type="dhx.PowerArray"/><return-type type="dhx.RecordBind"/><return-type type="dhx.RenderStack"/><return-type type="dhx.RenderType"/><return-type type="dhx.Scrollable"/><return-type type="dhx.SelectionModel"/><return-type type="dhx.Settings"/><return-type type="dhx.SingleRender"/><return-type type="dhx.Template"/><return-type type="dhx.Touch"/><return-type type="dhx.TouchEvents"/><return-type type="dhx.TreeDataMove"/><return-type type="dhx.TreeRenderStack"/><return-type type="dhx.TreeStore"/><return-type type="dhx.Type"/><return-type type="dhx.ValidateData"/><return-type type="dhx.ValueBind"/><return-type type="dhx.Values"/><return-type type="dhx.VirtualRenderStack"/><return-type type="dhx.history"/><return-type type="dhx.proxy"/><return-type type="dhx.storagecookie"/><return-type type="dhx.storagelocal"/><return-type type="dhx.storagesession"/>
				</return-types>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="$$">
		<constructors>
			<constructor scope="instance">
				<description>gets dhx element by id</description>
				<parameters>
					<parameter name="id" type="String" usage="required">
		            	<description>dhx element id</description>
		            </parameter>
		        </parameters>
				<return-types>
					<return-type type="dhx.ui.accordion"/><return-type type="dhx.ui.accordionitem"/><return-type type="dhx.ui.button"/><return-type type="dhx.ui.calendar"/><return-type type="dhx.ui.carousel"/><return-type type="dhx.ui.chart"/><return-type type="dhx.ui.checkbox"/><return-type type="dhx.ui.combo"/><return-type type="dhx.ui.counter"/><return-type type="dhx.ui.dataview"/><return-type type="dhx.ui.datepicker"/><return-type type="dhx.ui.form"/><return-type type="dhx.ui.googlemap"/><return-type type="dhx.ui.grid"/><return-type type="dhx.ui.grouplist"/><return-type type="dhx.ui.icon"/><return-type type="dhx.ui.iframe"/><return-type type="dhx.ui.imagebutton"/><return-type type="dhx.ui.input"/><return-type type="dhx.ui.label"/><return-type type="dhx.ui.layout"/><return-type type="dhx.ui.list"/><return-type type="dhx.ui.multiview"/><return-type type="dhx.ui.pagelist"/><return-type type="dhx.ui.popup"/><return-type type="dhx.ui.radio"/><return-type type="dhx.ui.richselect"/><return-type type="dhx.ui.scrollview"/><return-type type="dhx.ui.segmented"/><return-type type="dhx.ui.select"/><return-type type="dhx.ui.slider"/><return-type type="dhx.ui.tabbar"/><return-type type="dhx.ui.template"/><return-type type="dhx.ui.text"/><return-type type="dhx.ui.textarea"/><return-type type="dhx.ui.toggle"/><return-type type="dhx.ui.toolbar"/><return-type type="dhx.ui.video"/><return-type type="dhx.ui.view"/><return-type type="dhx.ui.window"/><return-type type="dhx.ActiveContent"/><return-type type="dhx.AtomDataLoader"/><return-type type="dhx.AtomRender"/><return-type type="dhx.BaseBind"/><return-type type="dhx.BindSource"/><return-type type="dhx.Canvas"/><return-type type="dhx.CanvasMgr"/><return-type type="dhx.CarouselPanel"/><return-type type="dhx.CollectionBind"/><return-type type="dhx.DataCollection"/><return-type type="dhx.DataDriver"/><return-type type="dhx.DataLoader"/><return-type type="dhx.DataMove"/><return-type type="dhx.DataProcessor"/><return-type type="dhx.DataRecord"/><return-type type="dhx.DataStore"/><return-type type="dhx.DataValue"/><return-type type="dhx.Date"/><return-type type="dhx.Destruction"/><return-type type="dhx.DragControl"/><return-type type="dhx.DragItem"/><return-type type="dhx.EditAbility"/><return-type type="dhx.EventSystem"/><return-type type="dhx.GlobalStore"/><return-type type="dhx.Group"/><return-type type="dhx.GroupStore"/><return-type type="dhx.IdSpace"/><return-type type="dhx.KeyEvents"/><return-type type="dhx.LinkedPanel"/><return-type type="dhx.Modality"/><return-type type="dhx.MouseEvents"/><return-type type="dhx.Movable"/><return-type type="dhx.Number"/><return-type type="dhx.PowerArray"/><return-type type="dhx.RecordBind"/><return-type type="dhx.RenderStack"/><return-type type="dhx.RenderType"/><return-type type="dhx.Scrollable"/><return-type type="dhx.SelectionModel"/><return-type type="dhx.Settings"/><return-type type="dhx.SingleRender"/><return-type type="dhx.Template"/><return-type type="dhx.Touch"/><return-type type="dhx.TouchEvents"/><return-type type="dhx.TreeDataMove"/><return-type type="dhx.TreeRenderStack"/><return-type type="dhx.TreeStore"/><return-type type="dhx.Type"/><return-type type="dhx.ValidateData"/><return-type type="dhx.ValueBind"/><return-type type="dhx.Values"/><return-type type="dhx.VirtualRenderStack"/><return-type type="dhx.history"/><return-type type="dhx.proxy"/><return-type type="dhx.storagecookie"/><return-type type="dhx.storagelocal"/><return-type type="dhx.storagesession"/>
				</return-types>
				<example></example>
			</constructor>
		</constructors>
	</class>
		<class type="dhx.ui.accordion">
	    <description>dhx.ui.accordion</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.accordion"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="index" scope="instance">
				<description>Returns an index of the currently selected view (index in the array of views)</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Index(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="reconstruct" scope="instance">
				<description>Rebuilds layout</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resizeChildren" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showBatch" scope="instance">
				<description>Makes visible elements which parameter &#039;batch&#039; is set to the specified name</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>ShowBatch(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;toolbar&amp;quot;, type:&amp;quot;top_bar&amp;quot;, visibleBatch:&amp;quot;init&amp;quot;, elements:&amp;#91;&lt;br&gt;						&amp;#123; view:&amp;quot;button&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						&amp;#123; view:&amp;quot;label&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;imagebutton&amp;quot;, ..., batch:&amp;quot;batch_2&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;radio&amp;quot;, id:&amp;quot;batch_name&amp;quot;, value:&amp;quot;batch_2&amp;quot;, options:&amp;#91;&amp;quot;batch_1&amp;quot;, &amp;quot;batch_2&amp;quot;&amp;#93;, click:&amp;quot;change_batch&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;function change_batch&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	var mode = $$&amp;#40;&amp;quot;batch_name&amp;quot;&amp;#41;.getValue&amp;#40;&amp;#41;;&lt;br&gt;	$$&amp;#40;&amp;quot;top_bar&amp;quot;&amp;#41;.showBatch&amp;#40;mode&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.accordion.config">
		<properties>
			
				<property name="cols" type="string" scope="instance" access="read-write">
					<description>array of views arranged horizontally</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view needs being initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>class name for view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>view gravity (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>view height</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="multi" type="string" scope="instance" access="read-write">
					<description>enables/disables mode when several items can be visible at once</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="rows" type="string" scope="instance" access="read-write">
					<description>array of views arranged vertically</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>defines border of layout</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>view width</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.accordionitem">
	    <description>dhx.ui.accordionitem</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.accordionitem"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="collapse" scope="instance">
				<description>Collapses accordion item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="expand" scope="instance">
				<description>Expands accordion item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Refreshes header label</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.accordionitem.config">
		<properties>
			
				<property name="body" type="string" scope="instance" access="read-write">
					<description>a view or html content that is shown in item</description>
				</property>
				

				<property name="collapsed" type="string" scope="instance" access="read-write">
					<description>defines whether an accordion cell needs being collapsed, takes true/false as a parameter</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view needs being initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>class name for view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>view gravity (1 by default)</description>
				</property>
				

				<property name="headerAltHeight" type="string" scope="instance" access="read-write">
					<description>header height in the collapsed state</description>
				</property>
				

				<property name="headerAlt" type="string" scope="instance" access="read-write">
					<description>specifies header in the collapsed state</description>
				</property>
				

				<property name="headerHeight" type="string" scope="instance" access="read-write">
					<description>header height</description>
				</property>
				

				<property name="header" type="string" scope="instance" access="read-write">
					<description>specifies header in the expanded state</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>view height</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>view width</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.button">
	    <description>dhx.ui.button</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.button"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.button.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.calendar">
	    <description>dhx.ui.calendar</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.calendar"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getSelectedDate" scope="instance">
				<description>Returns currently selected date</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns the current value of control</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>GetValue(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getVisibleDate" scope="instance">
				<description>Retuns visible date: in the general case, the selected date or the first day of the month if the currently selected date is not visible</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders an object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="selectDate" scope="instance">
				<description>Selects date</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>SelectDate(date, show)</description>
				</parameter>

				<parameter name="show" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for a control</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>SetValue(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showCalendar" scope="instance">
				<description>Shows calendar (and selects date if it is defined)</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>ShowCalendar(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.calendar.config">
		<properties>
			
				<property name="calendarDateFormat" type="string" scope="instance" access="read-write">
					<description>date format (%Y-%m-%d)</description>
				</property>
				

				<property name="calendarDayHeader" type="string" scope="instance" access="read-write">
					<description>format for week header (%d)</description>
				</property>
				

				<property name="calendarDay" type="string" scope="instance" access="read-write">
					<description>day format (%d)</description>
				</property>
				

				<property name="calendarHeader" type="string" scope="instance" access="read-write">
					<description>format for header (%F %Y)</description>
				</property>
				

				<property name="calendarMonthHeader" type="string" scope="instance" access="read-write">
					<description>month format in header (%F %Y)</description>
				</property>
				

				<property name="calendarWeekHeader" type="string" scope="instance" access="read-write">
					<description>label for column with weeks numbers (W#)</description>
				</property>
				

				<property name="calendarWeek" type="string" scope="instance" access="read-write">
					<description>format for week number (%W)</description>
				</property>
				

				<property name="cellHeight" type="string" scope="instance" access="read-write">
					<description>height of the cell with day (36)</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="date" type="string" scope="instance" access="read-write">
					<description>Date() object that specifies the initial date of the calendar (particularly month).</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>calendar height (300)</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="hourEnd" type="string" scope="instance" access="read-write">
					<description>the last hour in a hour select</description>
				</property>
				

				<property name="hourFormat" type="string" scope="instance" access="read-write">
					<description>hour format (%H)</description>
				</property>
				

				<property name="hourStart" type="string" scope="instance" access="read-write">
					<description>the first hour in a hour select (8)</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="minuteStep" type="string" scope="instance" access="read-write">
					<description>step in minutes selector (15)</description>
				</property>
				

				<property name="monthHeaderHeight" type="string" scope="instance" access="read-write">
					<description>the height of month header (40 by default, property should be changed in css too)</description>
				</property>
				

				<property name="move" type="string" scope="instance" access="read-write">
					<description>makes view movable</description>
				</property>
				

				<property name="navigation" type="string" scope="instance" access="read-write">
					<description>enables/disables month navigation in header - the possibility to change months (true)</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="selectedCss" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="selectedDateClassName" type="string" scope="instance" access="read-write">
					<description>class name for the selected date (dhx_cal_selected_day)</description>
				</property>
				

				<property name="skipEmptyWeeks" type="string" scope="instance" access="read-write">
					<description>enables/disables displaying empty weeks (true)</description>
				</property>
				

				<property name="startOnMonday" type="string" scope="instance" access="read-write">
					<description>defines whether week is started on monday</description>
				</property>
				

				<property name="timeSelectHeight" type="string" scope="instance" access="read-write">
					<description>the height of area with time selector (32 by default, property should be changed in css too)</description>
				</property>
				

				<property name="timeSelect" type="string" scope="instance" access="read-write">
					<description>enables/disables time selector (false)</description>
				</property>
				

				<property name="weekHeaderHeight" type="string" scope="instance" access="read-write">
					<description>the height of week header (20 by default, property should be changed in css too)</description>
				</property>
				

				<property name="weekHeader" type="string" scope="instance" access="read-write">
					<description>enables/disables additional header with week days (false)</description>
				</property>
				

				<property name="weekNumber" type="string" scope="instance" access="read-write">
					<description>enables/disables additional left column with weeks&#039; numbers (false)</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>calendar width (300)</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.carousel">
	    <description>dhx.ui.carousel</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.carousel"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getActive" scope="instance">
				<description>Returns id of the currently selected item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="index" scope="instance">
				<description>Returns an index of the currently selected view (index in the array of views)</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Index(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="reconstruct" scope="instance">
				<description>Rebuilds layout</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resizeChildren" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls carousel container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showBatch" scope="instance">
				<description>Makes visible elements which parameter &#039;batch&#039; is set to the specified name</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>ShowBatch(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;toolbar&amp;quot;, type:&amp;quot;top_bar&amp;quot;, visibleBatch:&amp;quot;init&amp;quot;, elements:&amp;#91;&lt;br&gt;						&amp;#123; view:&amp;quot;button&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						&amp;#123; view:&amp;quot;label&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;imagebutton&amp;quot;, ..., batch:&amp;quot;batch_2&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;radio&amp;quot;, id:&amp;quot;batch_name&amp;quot;, value:&amp;quot;batch_2&amp;quot;, options:&amp;#91;&amp;quot;batch_1&amp;quot;, &amp;quot;batch_2&amp;quot;&amp;#93;, click:&amp;quot;change_batch&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;function change_batch&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	var mode = $$&amp;#40;&amp;quot;batch_name&amp;quot;&amp;#41;.getValue&amp;#40;&amp;#41;;&lt;br&gt;	$$&amp;#40;&amp;quot;top_bar&amp;quot;&amp;#41;.showBatch&amp;#40;mode&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.carousel.config">
		<properties>
			
				<property name="cols" type="string" scope="instance" access="read-write">
					<description>array of views arranged horizontally</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view needs being initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>class name for view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>view gravity (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>view height</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="panel" type="string" scope="instance" access="read-write">
					<description>panel showing the total amount of carousel&#039;s items and which one of them is selected.</description>
				</property>
				

				<property name="rows" type="string" scope="instance" access="read-write">
					<description>array of views arranged vertically</description>
				</property>
				

				<property name="scrollSpeed" type="string" scope="instance" access="read-write">
					<description>speed of scrolling (&#039;100ms&#039; by default)</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>view width</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.chart">
	    <description>dhx.ui.chart</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.chart"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds item to the store</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj,index)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;Some new text&amp;quot;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//add to the start of list&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;First item&amp;quot;&lt;br&gt;&amp;#125;, 0&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//object can contain any properties&lt;br&gt;$$&amp;#40;'mygrid'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  some:&amp;quot;some string&amp;quot;,&lt;br&gt;  other:123,&lt;br&gt;  complex:&amp;#123;&lt;br&gt;  	contain:&amp;quot;any&amp;quot;,&lt;br&gt;  	content:&amp;quot;inside&amp;quot;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;, 0&amp;#41;;</example>
			</method>
			<method name="addSeries" scope="instance">
				<description>Adds the new chart series</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>AddSeries(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all items from the component</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="clearCanvas" scope="instance">
				<description>Clears canvas</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="dataCount" scope="instance">
				<description>Gets count of items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="exists" scope="instance">
				<description>Checks if the item with such ID exists</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Exists(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="filter" scope="instance">
				<description>Filters data</description>
				<parameters>

				<parameter name="text" type="String" usage="required">
					<description>Filter(text,value,preserve)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="preserve" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example>//filter all with 'abc' in 'text' property&lt;br&gt;list.filter&amp;#40;'#text#',&amp;quot;abc&amp;quot;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//same with filtering function&lt;br&gt;list.filter&amp;#40;function&amp;#40;obj&amp;#41;&amp;#123;&lt;br&gt;	return obj.text.toString&amp;#40;&amp;#41;.indexOf&amp;#40;&amp;quot;abc&amp;quot;&amp;#41; != -1;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Gets the ID of the first item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getCanvas" scope="instance">
				<description>Gets canvas</description>
				<parameters>

				<parameter name="context" type="String" usage="required">
					<description>GetCanvas(context)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="group" scope="instance">
				<description>Groups data</description>
				<parameters>

				<parameter name="config" type="String" usage="required">
					<description>Group(config,mode)</description>
				</parameter>

				<parameter name="mode" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="idByIndex" scope="instance">
				<description>Gets the id of an item with taken index</description>
				<parameters>

				<parameter name="index" type="Number" usage="required">
					<description>IdByIndex(index)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="indexById" scope="instance">
				<description>The index of the item in question</description>
				<parameters>

				<parameter name="id" type="Number" usage="required">
					<description>IndexById(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="item" scope="instance">
				<description>Gets the object of a data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Item(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="last" scope="instance">
				<description>Gets the id of the last item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="loadNext" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="count" type="String" usage="required">
					<description>LoadNext(count, start)</description>
				</parameter>

				<parameter name="start" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="next" scope="instance">
				<description>Gets ID of the next element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Next(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="previous" scope="instance">
				<description>Gets ID of the previous element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Previous(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaint the whole view or a certain item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Refresh(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes element from datastore</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a chart</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="renderText" scope="instance">
				<description>Creates absolutely positioned container</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>RenderText(x,y,text,css,w)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="text" type="String" usage="required">
					<description>File:</description>
				</parameter>

				<parameter name="css" type="String" usage="required">
					<description>Implemented in: Canvas</description>
				</parameter>

				<parameter name="w" type="String" usage="required">
					<description>Included in: chart</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="renderTextAt" scope="instance">
				<description>Creates absolutely positioned container and then align it according to the 1st and 2nd parameters</description>
				<parameters>

				<parameter name="valign" type="String" usage="required">
					<description>RenderTextAt(valign,align, x,y,t,c,w)</description>
				</parameter>

				<parameter name="align" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="x" type="String" usage="required">
					<description>File:</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Implemented in: Canvas</description>
				</parameter>

				<parameter name="t" type="String" usage="required">
					<description>Included in: chart</description>
				</parameter>

				<parameter name="c" type="String" usage="optional">
					<description>Valign - vertical align (optional)</description>
				</parameter>

				<parameter name="w" type="String" usage="optional">
					<description>Align - horizontal align (optional)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes data to a json object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="sort" scope="instance">
				<description>Sorts datastore</description>
				<parameters>

				<parameter name="by" type="String" usage="required">
					<description>Sort(by, dir, as)</description>
				</parameter>

				<parameter name="dir" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="as" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sync" scope="instance">
				<description>Allows to sync two copy all, or part of data from one DataCollection to another</description>
				<parameters>

				<parameter name="source" type="String" usage="required">
					<description>Sync(source, filter, silent)</description>
				</parameter>

				<parameter name="filter" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="silent" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="ungroup" scope="instance">
				<description>Ungroups data</description>
				<parameters>

				<parameter name="mode" type="String" usage="required">
					<description>Ungroup(mode)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="update" scope="instance">
				<description>Sets properties of the data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Update(id,data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.chart.config">
		<properties>
			
				<property name="alpha" type="string" scope="instance" access="read-write">
					<description>the transparency of a chart item (a number between 0 and 1)</description>
				</property>
				

				<property name="barWidth" type="string" scope="instance" access="read-write">
					<description>the width of bars</description>
				</property>
				

				<property name="border" type="string" scope="instance" access="read-write">
					<description>enables/disables bar border</description>
				</property>
				

				<property name="cant" type="string" scope="instance" access="read-write">
					<description>a value from 0 to 1 that defines the slope angle of 3D pie (default value - 0.5)</description>
				</property>
				

				<property name="color" type="string" scope="instance" access="read-write">
					<description>a certain color or template that defines items colors</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="dataFeed" type="string" scope="instance" access="read-write">
					<description>path to php file that will get data. Used to reload data from server.</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datastore" type="string" scope="instance" access="read-write">
					<description>custom DataStore object</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="gradient" type="string" scope="instance" access="read-write">
					<description>specifies a chart gradient (applicable to bar, pie charts)</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="group" type="string" scope="instance" access="read-write">
					<description>an object with settings for initial grouping</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="item" type="string" scope="instance" access="read-write">
					<description>defines chart point presenting an item (applicable to line charts: &#039;line&#039; and &#039;spline&#039;)</description>
				</property>
				

				<property name="labelOffset" type="string" scope="instance" access="read-write">
					<description>property of pie charts that defines offset of sector labels from the pie edge (20 is default)</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>the template for items&#039; labels</description>
				</property>
				

				<property name="legend" type="string" scope="instance" access="read-write">
					<description>defines chart legend</description>
				</property>
				

				<property name="lineColor" type="string" scope="instance" access="read-write">
					<description>pie chart property that sets color for pie borders (#ffffff)</description>
				</property>
				

				<property name="line" type="string" scope="instance" access="read-write">
					<description>defines chart line (applicable to line charts:&#039;line&#039; and &#039;spline&#039;)</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="origin" type="string" scope="instance" access="read-write">
					<description>bar chart property, sets scale origin</description>
				</property>
				

				<property name="padding" type="string" scope="instance" access="read-write">
					<description>an object that defines padding of chart content</description>
				</property>
				

				<property name="pieInnerText" type="string" scope="instance" access="read-write">
					<description>pie chart property, the template for the inner labels</description>
				</property>
				

				<property name="radius" type="string" scope="instance" access="read-write">
					<description>the radius for the bar&#039;s rounding</description>
				</property>
				

				<property name="scheme" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="series" type="string" scope="instance" access="read-write">
					<description>the array of series configuration objects</description>
				</property>
				

				<property name="shadow" type="string" scope="instance" access="read-write">
					<description>enables/disables pie shadow</description>
				</property>
				

				<property name="sort" type="string" scope="instance" access="read-write">
					<description>defines sorting settings</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>chart type</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="value" type="string" scope="instance" access="read-write">
					<description>the template for item values</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				

				<property name="xAxis" type="string" scope="instance" access="read-write">
					<description>defines the horizontal axis</description>
				</property>
				

				<property name="yAxis" type="string" scope="instance" access="read-write">
					<description>defines the vertical axis</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.checkbox">
	    <description>dhx.ui.checkbox</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.checkbox"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getLabel" scope="instance">
				<description>Returns text label of the control</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="next" scope="instance">
				<description>Sets the next value of the control</description>
				<parameters>

				<parameter name="step" type="String" usage="required">
					<description>Next(step, min, max)</description>
				</parameter>

				<parameter name="min" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="max" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="prev" scope="instance">
				<description>Sets the previous value of the control</description>
				<parameters>

				<parameter name="step" type="String" usage="required">
					<description>Prev(step, min, max)</description>
				</parameter>

				<parameter name="min" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="max" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="toggle" scope="instance">
				<description>Swiches states of the control, i.e. true to false and vice-versa</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.checkbox.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>the text label of control</description>
				</property>
				

				<property name="min" type="string" scope="instance" access="read-write">
					<description>the minimum value of the control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="step" type="string" scope="instance" access="read-write">
					<description>the step of the control (the difference between two successive values)</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.combo">
	    <description>dhx.ui.combo</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.combo"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getList" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.combo.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="filter" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="iconCss" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="iconWidth" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="icon" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="options" type="string" scope="instance" access="read-write">
					<description>defines select options of control</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.counter">
	    <description>dhx.ui.counter</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.counter"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getLabel" scope="instance">
				<description>Returns text label of the control</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="next" scope="instance">
				<description>Sets the next value of the control</description>
				<parameters>

				<parameter name="step" type="String" usage="required">
					<description>Next(step, min, max)</description>
				</parameter>

				<parameter name="min" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="max" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="prev" scope="instance">
				<description>Sets the previous value of the control</description>
				<parameters>

				<parameter name="step" type="String" usage="required">
					<description>Prev(step, min, max)</description>
				</parameter>

				<parameter name="min" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="max" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.counter.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="min" type="string" scope="instance" access="read-write">
					<description>the minimum value of the control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="step" type="string" scope="instance" access="read-write">
					<description>the step of the control (the difference between two successive values)</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.dataview">
	    <description>dhx.ui.dataview</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.dataview"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds item to the store</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj,index)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;Some new text&amp;quot;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//add to the start of list&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;First item&amp;quot;&lt;br&gt;&amp;#125;, 0&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//object can contain any properties&lt;br&gt;$$&amp;#40;'mygrid'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  some:&amp;quot;some string&amp;quot;,&lt;br&gt;  other:123,&lt;br&gt;  complex:&amp;#123;&lt;br&gt;  	contain:&amp;quot;any&amp;quot;,&lt;br&gt;  	content:&amp;quot;inside&amp;quot;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;, 0&amp;#41;;</example>
			</method>
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all items from the component</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="customize" scope="instance">
				<description>Applies new type settings</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Customize(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="dataCount" scope="instance">
				<description>Gets count of items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="dragMarker" scope="instance">
				<description>Renders drag-n-drop marker</description>
				<parameters>

				<parameter name="context" type="String" usage="required">
					<description>DragMarker(context,ev)</description>
				</parameter>

				<parameter name="ev" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="edit" scope="instance">
				<description>Switches item to the edit state</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Edit(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="exists" scope="instance">
				<description>Checks if the item with such ID exists</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Exists(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="filter" scope="instance">
				<description>Filters data</description>
				<parameters>

				<parameter name="text" type="String" usage="required">
					<description>Filter(text,value,preserve)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="preserve" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example>//filter all with 'abc' in 'text' property&lt;br&gt;list.filter&amp;#40;'#text#',&amp;quot;abc&amp;quot;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//same with filtering function&lt;br&gt;list.filter&amp;#40;function&amp;#40;obj&amp;#41;&amp;#123;&lt;br&gt;	return obj.text.toString&amp;#40;&amp;#41;.indexOf&amp;#40;&amp;quot;abc&amp;quot;&amp;#41; != -1;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Gets the ID of the first item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getSelected" scope="instance">
				<description>Returns ID of selected item(s)</description>
				<parameters>

				<parameter name="as_array" type="String" usage="required">
					<description>GetSelected(as_array)</description>
				</parameter>

				</parameters>
				<example>//single select mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = someid&lt;br&gt;&amp;nbsp;&lt;br&gt;//multiselect mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = [someid1, someid2, someid3]</example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="idByIndex" scope="instance">
				<description>Gets the id of an item with taken index</description>
				<parameters>

				<parameter name="index" type="Number" usage="required">
					<description>IdByIndex(index)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="indexById" scope="instance">
				<description>The index of the item in question</description>
				<parameters>

				<parameter name="id" type="Number" usage="required">
					<description>IndexById(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isEdit" scope="instance">
				<description>Returns id of item in edit state, or null if none</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="isSelected" scope="instance">
				<description>Checks if item is selected or not</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>IsSelected(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="item" scope="instance">
				<description>Gets the object of a data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Item(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="last" scope="instance">
				<description>Gets the id of the last item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="loadNext" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="count" type="String" usage="required">
					<description>LoadNext(count, start)</description>
				</parameter>

				<parameter name="start" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="locate" scope="instance">
				<description></description>
				<parameters>

				<parameter name="e" type="String" usage="required">
					<description>Locate(e)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="next" scope="instance">
				<description>Gets ID of the next element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Next(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="previous" scope="instance">
				<description>Gets ID of the previous element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Previous(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaint the whole view or a certain item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Refresh(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes element from datastore</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Render(id,data,type)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>File: core/render/render.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="select" scope="instance">
				<description>Selects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Select(id,non_modal,continue_old)</description>
				</parameter>

				<parameter name="non_modal" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="continue_old" type="String" usage="required">
					<description>File: core/selection.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="selectAll" scope="instance">
				<description>Selects all items</description>
				<parameters>

				<parameter name="from" type="String" usage="required">
					<description>SelectAll(from,to)</description>
				</parameter>

				<parameter name="to" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes data to a json object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showItem" scope="instance">
				<description>Shows the specified item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>ShowItem(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sort" scope="instance">
				<description>Sorts datastore</description>
				<parameters>

				<parameter name="by" type="String" usage="required">
					<description>Sort(by, dir, as)</description>
				</parameter>

				<parameter name="dir" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="as" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="stopEdit" scope="instance">
				<description>Switches any item in edit state, back to normal</description>
				<parameters>

				<parameter name="mode" type="String" usage="required">
					<description>StopEdit(mode, if_not_id)</description>
				</parameter>

				<parameter name="if_not_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sync" scope="instance">
				<description>Allows to sync two copy all, or part of data from one DataCollection to another</description>
				<parameters>

				<parameter name="source" type="String" usage="required">
					<description>Sync(source, filter, silent)</description>
				</parameter>

				<parameter name="filter" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="silent" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="unselect" scope="instance">
				<description>Unselects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Unselect(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unselectAll" scope="instance">
				<description>Unselects all items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="update" scope="instance">
				<description>Sets properties of the data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Update(id,data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.dataview.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="dataFeed" type="string" scope="instance" access="read-write">
					<description>path to php file that will get data. Used to reload data from server.</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datastore" type="string" scope="instance" access="read-write">
					<description>custom DataStore object</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="edit" type="string" scope="instance" access="read-write">
					<description>enables/disables item editing</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="scheme" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				

				<property name="select" type="string" scope="instance" access="read-write">
					<description>enables/disables item selection or multiselection in grouplist</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>object that specifies items list presentation</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				

				<property name="xCount" type="string" scope="instance" access="read-write">
					<description>adjusts view width to display the defined number of items in a row</description>
				</property>
				

				<property name="yCount" type="string" scope="instance" access="read-write">
					<description>adjusts view height to display the defined number of items in a column</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.datepicker">
	    <description>dhx.ui.datepicker</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.datepicker"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getList" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.datepicker.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="dateFormat" type="string" scope="instance" access="read-write">
					<description>date format (%Y-%m-%d)</description>
				</property>
				

				<property name="externalDateFormat" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="iconCss" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="iconWidth" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="icon" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="options" type="string" scope="instance" access="read-write">
					<description>defines select options of control</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="stringResult" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="value" type="string" scope="instance" access="read-write">
					<description>initial value of the control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.form">
	    <description>dhx.ui.form</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.form"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clear" scope="instance">
				<description>Clears values of all inputs ( resets them to the default values )</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'from', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'to', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Clear form', click:&amp;quot;clear_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function clear_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'myform'&amp;#41;.clear&amp;#40;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="focus" scope="instance">
				<description>Sets focus to an input</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>Focus(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.focus&amp;#40;&amp;quot;field_a&amp;quot;&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValues" scope="instance">
				<description>Gets hash of data values</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	rows:&amp;#91;&amp;#123;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'From', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'To', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, id:&amp;quot;button1&amp;quot;, label: 'Show values', click:&amp;quot;get_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;	&amp;#125;,&lt;br&gt;	&amp;#123; id:&amp;quot;log&amp;quot;, template:function&amp;#40;obj&amp;#41;&amp;#123; return &amp;quot;&amp;lt;pre&amp;gt;&amp;quot;+JSON.stringify&amp;#40;obj&amp;#41;.replace&amp;#40;/,/g,&amp;quot;\n,&amp;quot;&amp;#41;+&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;; &amp;#125;&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function get_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'log'&amp;#41;.parse&amp;#40;$$&amp;#40;'myform'&amp;#41;.getValues&amp;#40;&amp;#41;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="index" scope="instance">
				<description>Returns an index of the currently selected view (index in the array of views)</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Index(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="reconstruct" scope="instance">
				<description>Rebuilds layout</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints the whole view or a certain item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resizeChildren" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValues" scope="instance">
				<description>Sets values for all inputs in the component</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>SetValues(data)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	rows:&amp;#91;&amp;#123;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'from', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'to', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;	&amp;#125;,&lt;br&gt;	&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Fill form', click:&amp;quot;set_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function set_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'myform'&amp;#41;.setValues&amp;#40;&amp;#123;&lt;br&gt;			field_a: &amp;quot;London&amp;quot;,&lt;br&gt;			field_b: &amp;quot;New York&amp;quot;,&lt;br&gt;			field_c: &amp;quot;left&amp;quot;&lt;br&gt;	&amp;#125;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showBatch" scope="instance">
				<description>Makes visible elements which parameter &#039;batch&#039; is set to the specified name</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>ShowBatch(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;toolbar&amp;quot;, type:&amp;quot;top_bar&amp;quot;, visibleBatch:&amp;quot;init&amp;quot;, elements:&amp;#91;&lt;br&gt;						&amp;#123; view:&amp;quot;button&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						&amp;#123; view:&amp;quot;label&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;imagebutton&amp;quot;, ..., batch:&amp;quot;batch_2&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;radio&amp;quot;, id:&amp;quot;batch_name&amp;quot;, value:&amp;quot;batch_2&amp;quot;, options:&amp;#91;&amp;quot;batch_1&amp;quot;, &amp;quot;batch_2&amp;quot;&amp;#93;, click:&amp;quot;change_batch&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;function change_batch&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	var mode = $$&amp;#40;&amp;quot;batch_name&amp;quot;&amp;#41;.getValue&amp;#40;&amp;#41;;&lt;br&gt;	$$&amp;#40;&amp;quot;top_bar&amp;quot;&amp;#41;.showBatch&amp;#40;mode&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="validate" scope="instance">
				<description>Validates for the defined rules</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Validate(obj)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, &lt;br&gt;	id:&amp;quot;myform&amp;quot;, &lt;br&gt;	elements:&amp;#91;&lt;br&gt;		&amp;#123; view:&amp;quot;text&amp;quot;, inputWidth:300, label:&amp;quot;Name *&amp;quot;, id:&amp;quot;name&amp;quot;&amp;#125;,&lt;br&gt;		&amp;#123; view:&amp;quot;text&amp;quot;, inputWidth:300, label:&amp;quot;Age *&amp;quot;,  id:&amp;quot;age&amp;quot;&amp;#125;,&lt;br&gt;		&amp;#123; view:&amp;quot;button&amp;quot;, inputWidth:300, label:&amp;quot;Submit&amp;quot;, click:&amp;quot;submit_form&amp;quot;&amp;#125;&amp;#93;,&lt;br&gt;	rules:&amp;#123;&lt;br&gt;		name:dhx.rules.isNotEmpty,&lt;br&gt;		age:dhx.rules.isNumber&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;submit_form = function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;$$&amp;#40;&amp;quot;myform&amp;quot;&amp;#41;.validate&amp;#40;&amp;#41;==false&amp;#41;&lt;br&gt;		&amp;#123;dhx.notice&amp;#40;&amp;quot;Invalid value for some field&amp;quot;&amp;#41;;&amp;#125;&lt;br&gt;&amp;#125;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.form.config">
		<properties>
			
				<property name="cols" type="string" scope="instance" access="read-write">
					<description>array of views arranged horizontally</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view needs being initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>class name for view container</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>view gravity (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>view height</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="rows" type="string" scope="instance" access="read-write">
					<description>array of views arranged vertically</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>the type of toolbar</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>view width</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.googlemap">
	    <description>dhx.ui.googlemap</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.googlemap"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="render" scope="instance">
				<description>Renders map object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.googlemap.config">
		<properties>
			
				<property name="center" type="string" scope="instance" access="read-write">
					<description>sets initial center of the map. After initialization, map will be focused on this point.</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="mapType" type="string" scope="instance" access="read-write">
					<description>type of the map</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				

				<property name="zoom" type="string" scope="instance" access="read-write">
					<description>sets initial zoom (value can be changed from 0 to 20. The default value - 5)</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.grid">
	    <description>dhx.ui.grid</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.grid"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds item to the store</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj,index)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;Some new text&amp;quot;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//add to the start of list&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;First item&amp;quot;&lt;br&gt;&amp;#125;, 0&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//object can contain any properties&lt;br&gt;$$&amp;#40;'mygrid'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  some:&amp;quot;some string&amp;quot;,&lt;br&gt;  other:123,&lt;br&gt;  complex:&amp;#123;&lt;br&gt;  	contain:&amp;quot;any&amp;quot;,&lt;br&gt;  	content:&amp;quot;inside&amp;quot;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;, 0&amp;#41;;</example>
			</method>
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all items from the component</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="customize" scope="instance">
				<description>Applies new type settings</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Customize(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="dataCount" scope="instance">
				<description>Gets count of items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="exists" scope="instance">
				<description>Checks if the item with such ID exists</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Exists(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="filter" scope="instance">
				<description>Filters data</description>
				<parameters>

				<parameter name="text" type="String" usage="required">
					<description>Filter(text,value,preserve)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="preserve" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example>//filter all with 'abc' in 'text' property&lt;br&gt;list.filter&amp;#40;'#text#',&amp;quot;abc&amp;quot;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//same with filtering function&lt;br&gt;list.filter&amp;#40;function&amp;#40;obj&amp;#41;&amp;#123;&lt;br&gt;	return obj.text.toString&amp;#40;&amp;#41;.indexOf&amp;#40;&amp;quot;abc&amp;quot;&amp;#41; != -1;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Gets the ID of the first item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getSelected" scope="instance">
				<description>Returns ID of selected item(s)</description>
				<parameters>

				<parameter name="as_array" type="String" usage="required">
					<description>GetSelected(as_array)</description>
				</parameter>

				</parameters>
				<example>//single select mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = someid&lt;br&gt;&amp;nbsp;&lt;br&gt;//multiselect mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = [someid1, someid2, someid3]</example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="idByIndex" scope="instance">
				<description>Gets the id of an item with taken index</description>
				<parameters>

				<parameter name="index" type="Number" usage="required">
					<description>IdByIndex(index)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="indexById" scope="instance">
				<description>The index of the item in question</description>
				<parameters>

				<parameter name="id" type="Number" usage="required">
					<description>IndexById(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isSelected" scope="instance">
				<description>Checks if item is selected or not</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>IsSelected(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="item" scope="instance">
				<description>Gets the object of a data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Item(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="last" scope="instance">
				<description>Gets the id of the last item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="loadNext" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="count" type="String" usage="required">
					<description>LoadNext(count, start)</description>
				</parameter>

				<parameter name="start" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="locate" scope="instance">
				<description></description>
				<parameters>

				<parameter name="e" type="String" usage="required">
					<description>Locate(e)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="next" scope="instance">
				<description>Gets ID of the next element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Next(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="previous" scope="instance">
				<description>Gets ID of the previous element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Previous(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaint the whole view or a certain item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Refresh(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes element from datastore</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Render(id,data,type)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>File: core/render/render.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="select" scope="instance">
				<description>Selects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Select(id,non_modal,continue_old)</description>
				</parameter>

				<parameter name="non_modal" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="continue_old" type="String" usage="required">
					<description>File: core/selection.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="selectAll" scope="instance">
				<description>Selects all items</description>
				<parameters>

				<parameter name="from" type="String" usage="required">
					<description>SelectAll(from,to)</description>
				</parameter>

				<parameter name="to" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes data to a json object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showItem" scope="instance">
				<description>Shows the specified item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>ShowItem(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sort" scope="instance">
				<description>Sorts datastore</description>
				<parameters>

				<parameter name="by" type="String" usage="required">
					<description>Sort(by, dir, as)</description>
				</parameter>

				<parameter name="dir" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="as" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sync" scope="instance">
				<description>Allows to sync two copy all, or part of data from one DataCollection to another</description>
				<parameters>

				<parameter name="source" type="String" usage="required">
					<description>Sync(source, filter, silent)</description>
				</parameter>

				<parameter name="filter" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="silent" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="unselect" scope="instance">
				<description>Unselects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Unselect(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unselectAll" scope="instance">
				<description>Unselects all items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="update" scope="instance">
				<description>Sets properties of the data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Update(id,data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.grid.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="dataFeed" type="string" scope="instance" access="read-write">
					<description>path to php file that will get data. Used to reload data from server.</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datastore" type="string" scope="instance" access="read-write">
					<description>custom DataStore object</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="fields" type="string" scope="instance" access="read-write">
					<description>specifies grid columns (in the grid will be as many columns as there are fields specified by this parameter)</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="headerHeight" type="string" scope="instance" access="read-write">
					<description>height of header</description>
				</property>
				

				<property name="header" type="string" scope="instance" access="read-write">
					<description>shows/hides grid header</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="scheme" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>defines touch scroll: x or y</description>
				</property>
				

				<property name="select" type="string" scope="instance" access="read-write">
					<description>enables/disables item selection or multiselection in grid</description>
				</property>
				

				<property name="sorting" type="string" scope="instance" access="read-write">
					<description>enables/disables sorting</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>object that specifies items list presentation</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.grouplist">
	    <description>dhx.ui.grouplist</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.grouplist"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds a new item into a certain branch</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj, index, parent)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="parent" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="add" scope="instance">
				<description>Adds a new item into a certain branch</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj, index, parent)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="parent" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="branchIndex" scope="instance">
				<description>Gets position of the item in the parent branch</description>
				<parameters>

				<parameter name="parent" type="String" usage="required">
					<description>BranchIndex(parent, child)</description>
				</parameter>

				<parameter name="child" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all data</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all data</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="customize" scope="instance">
				<description>Applies new type settings</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Customize(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="dataCount" scope="instance">
				<description>Gets count of items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="exists" scope="instance">
				<description>Checks if the item with such ID exists</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Exists(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="filter" scope="instance">
				<description>Filters data</description>
				<parameters>

				<parameter name="text" type="String" usage="required">
					<description>Filter(text,value,preserve)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="preserve" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example>//filter all with 'abc' in 'text' property&lt;br&gt;list.filter&amp;#40;'#text#',&amp;quot;abc&amp;quot;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//same with filtering function&lt;br&gt;list.filter&amp;#40;function&amp;#40;obj&amp;#41;&amp;#123;&lt;br&gt;	return obj.text.toString&amp;#40;&amp;#41;.indexOf&amp;#40;&amp;quot;abc&amp;quot;&amp;#41; != -1;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Gets the ID of the first item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="firstChild" scope="instance">
				<description>Gets the id of the first child in a certain branch</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>FirstChild(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getSelected" scope="instance">
				<description>Returns ID of selected item(s)</description>
				<parameters>

				<parameter name="as_array" type="String" usage="required">
					<description>GetSelected(as_array)</description>
				</parameter>

				</parameters>
				<example>//single select mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = someid&lt;br&gt;&amp;nbsp;&lt;br&gt;//multiselect mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = [someid1, someid2, someid3]</example>
			</method>
			<method name="hasChild" scope="instance">
				<description>Checks whether an item exists in a certain branch (at any level)</description>
				<parameters>

				<parameter name="parent" type="String" usage="required">
					<description>HasChild(parent, child)</description>
				</parameter>

				<parameter name="child" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="idByIndex" scope="instance">
				<description>Gets the id of an item with taken index</description>
				<parameters>

				<parameter name="index" type="Number" usage="required">
					<description>IdByIndex(index)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="indexById" scope="instance">
				<description>The index of the item in question</description>
				<parameters>

				<parameter name="id" type="Number" usage="required">
					<description>IndexById(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isSelected" scope="instance">
				<description>Checks if item is selected or not</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>IsSelected(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="item" scope="instance">
				<description>Gets the object of a data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Item(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="last" scope="instance">
				<description>Gets the id of the last item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="loadNext" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="count" type="String" usage="required">
					<description>LoadNext(count, start)</description>
				</parameter>

				<parameter name="start" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="locate" scope="instance">
				<description></description>
				<parameters>

				<parameter name="e" type="String" usage="required">
					<description>Locate(e)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="next" scope="instance">
				<description>Gets ID of the next element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Next(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="nextSibling" scope="instance">
				<description>Gets the id of the next item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>NextSibling(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parent" scope="instance">
				<description>Gets the id of the parent branch</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Parent(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="prevSibling" scope="instance">
				<description>Gets the id of the previous item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>PrevSibling(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="previous" scope="instance">
				<description>Gets ID of the previous element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Previous(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaint the whole view or a certain item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Refresh(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes an item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes an item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Render(id,data,type)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>File: core/render/render.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="select" scope="instance">
				<description>Selects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Select(id,non_modal,continue_old)</description>
				</parameter>

				<parameter name="non_modal" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="continue_old" type="String" usage="required">
					<description>File: core/selection.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="selectAll" scope="instance">
				<description>Selects all items</description>
				<parameters>

				<parameter name="from" type="String" usage="required">
					<description>SelectAll(from,to)</description>
				</parameter>

				<parameter name="to" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes branch or the whole dataset to a json object</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Serialize(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes branch or the whole dataset to a json object</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Serialize(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showItem" scope="instance">
				<description>Shows the specified item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>ShowItem(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sort" scope="instance">
				<description>Sorts datastore</description>
				<parameters>

				<parameter name="by" type="String" usage="required">
					<description>Sort(by, dir, as)</description>
				</parameter>

				<parameter name="dir" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="as" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sync" scope="instance">
				<description>Allows to sync two copy all, or part of data from one DataCollection to another</description>
				<parameters>

				<parameter name="source" type="String" usage="required">
					<description>Sync(source, filter, silent)</description>
				</parameter>

				<parameter name="filter" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="silent" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="unselect" scope="instance">
				<description>Unselects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Unselect(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unselectAll" scope="instance">
				<description>Unselects all items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="update" scope="instance">
				<description>Sets properties of the data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Update(id,data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.grouplist.config">
		<properties>
			
				<property name="animate" type="string" scope="instance" access="read-write">
					<description>enables/disables animation</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="dataFeed" type="string" scope="instance" access="read-write">
					<description>path to php file that will get data. Used to reload data from server.</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datastore" type="string" scope="instance" access="read-write">
					<description>custom DataStore object</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="scheme" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				

				<property name="select" type="string" scope="instance" access="read-write">
					<description>enables/disables item selection or multiselection in grouplist</description>
				</property>
				

				<property name="templateBack" type="string" scope="instance" access="read-write">
					<description>an html template that defines data that will be presented in group header in the expanded state</description>
				</property>
				

				<property name="templateGroup" type="string" scope="instance" access="read-write">
					<description>an html template that defines data that will be presented in group header in the collapsed state</description>
				</property>
				

				<property name="templateItem" type="string" scope="instance" access="read-write">
					<description>an html template that defines data that will be presented in grouplist</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>object that specifies items list presentation</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.icon">
	    <description>dhx.ui.icon</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.icon"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.icon.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.iframe">
	    <description>dhx.ui.iframe</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.iframe"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getWindow" scope="instance">
				<description>Gets the window object of an iframe</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="load" scope="instance">
				<description>Loads the document you&#039;d like to show in an iframe</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>Load(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.iframe.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="loading" type="string" scope="instance" access="read-write">
					<description>enables/disables loading cover</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="src" type="string" scope="instance" access="read-write">
					<description></description>
				</property>
				

				<property name="waitMessage" type="string" scope="instance" access="read-write">
					<description>defines whether the loading cover should be displayed while loading (actual in case of &#039;src&#039; parameter)</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.imagebutton">
	    <description>dhx.ui.imagebutton</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.imagebutton"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.imagebutton.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.input">
	    <description>dhx.ui.input</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.input"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.input.config">
		<properties>
			
				<property name="attributes" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.label">
	    <description>dhx.ui.label</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.label"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.label.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.layout">
	    <description>dhx.ui.layout</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.layout"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="index" scope="instance">
				<description>Returns an index of the currently selected view (index in the array of views)</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Index(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="reconstruct" scope="instance">
				<description>Rebuilds layout</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resizeChildren" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showBatch" scope="instance">
				<description>Makes visible elements which parameter &#039;batch&#039; is set to the specified name</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>ShowBatch(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;toolbar&amp;quot;, type:&amp;quot;top_bar&amp;quot;, visibleBatch:&amp;quot;init&amp;quot;, elements:&amp;#91;&lt;br&gt;						&amp;#123; view:&amp;quot;button&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						&amp;#123; view:&amp;quot;label&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;imagebutton&amp;quot;, ..., batch:&amp;quot;batch_2&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;radio&amp;quot;, id:&amp;quot;batch_name&amp;quot;, value:&amp;quot;batch_2&amp;quot;, options:&amp;#91;&amp;quot;batch_1&amp;quot;, &amp;quot;batch_2&amp;quot;&amp;#93;, click:&amp;quot;change_batch&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;function change_batch&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	var mode = $$&amp;#40;&amp;quot;batch_name&amp;quot;&amp;#41;.getValue&amp;#40;&amp;#41;;&lt;br&gt;	$$&amp;#40;&amp;quot;top_bar&amp;quot;&amp;#41;.showBatch&amp;#40;mode&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.layout.config">
		<properties>
			
				<property name="cols" type="string" scope="instance" access="read-write">
					<description>array of views arranged horizontally</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view needs being initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>class name for view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>view gravity (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>view height</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="rows" type="string" scope="instance" access="read-write">
					<description>array of views arranged vertically</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>defines border of layout</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>view width</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.list">
	    <description>dhx.ui.list</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.list"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds item to the store</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj,index)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;Some new text&amp;quot;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//add to the start of list&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;First item&amp;quot;&lt;br&gt;&amp;#125;, 0&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//object can contain any properties&lt;br&gt;$$&amp;#40;'mygrid'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  some:&amp;quot;some string&amp;quot;,&lt;br&gt;  other:123,&lt;br&gt;  complex:&amp;#123;&lt;br&gt;  	contain:&amp;quot;any&amp;quot;,&lt;br&gt;  	content:&amp;quot;inside&amp;quot;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;, 0&amp;#41;;</example>
			</method>
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all items from the component</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="customize" scope="instance">
				<description>Applies new type settings</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Customize(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="dataCount" scope="instance">
				<description>Gets count of items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="exists" scope="instance">
				<description>Checks if the item with such ID exists</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Exists(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="filter" scope="instance">
				<description>Filters data</description>
				<parameters>

				<parameter name="text" type="String" usage="required">
					<description>Filter(text,value,preserve)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="preserve" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example>//filter all with 'abc' in 'text' property&lt;br&gt;list.filter&amp;#40;'#text#',&amp;quot;abc&amp;quot;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//same with filtering function&lt;br&gt;list.filter&amp;#40;function&amp;#40;obj&amp;#41;&amp;#123;&lt;br&gt;	return obj.text.toString&amp;#40;&amp;#41;.indexOf&amp;#40;&amp;quot;abc&amp;quot;&amp;#41; != -1;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Gets the ID of the first item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getSelected" scope="instance">
				<description>Returns ID of selected item(s)</description>
				<parameters>

				<parameter name="as_array" type="String" usage="required">
					<description>GetSelected(as_array)</description>
				</parameter>

				</parameters>
				<example>//single select mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = someid&lt;br&gt;&amp;nbsp;&lt;br&gt;//multiselect mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = [someid1, someid2, someid3]</example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="idByIndex" scope="instance">
				<description>Gets the id of an item with taken index</description>
				<parameters>

				<parameter name="index" type="Number" usage="required">
					<description>IdByIndex(index)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="indexById" scope="instance">
				<description>The index of the item in question</description>
				<parameters>

				<parameter name="id" type="Number" usage="required">
					<description>IndexById(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isSelected" scope="instance">
				<description>Checks if item is selected or not</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>IsSelected(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="item" scope="instance">
				<description>Gets the object of a data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Item(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="last" scope="instance">
				<description>Gets the id of the last item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="loadNext" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="count" type="String" usage="required">
					<description>LoadNext(count, start)</description>
				</parameter>

				<parameter name="start" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="locate" scope="instance">
				<description></description>
				<parameters>

				<parameter name="e" type="String" usage="required">
					<description>Locate(e)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="next" scope="instance">
				<description>Gets ID of the next element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Next(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="previous" scope="instance">
				<description>Gets ID of the previous element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Previous(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaint the whole view or a certain item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Refresh(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes element from datastore</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Render(id,data,type)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>File: core/render/render.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="select" scope="instance">
				<description>Selects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Select(id,non_modal,continue_old)</description>
				</parameter>

				<parameter name="non_modal" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="continue_old" type="String" usage="required">
					<description>File: core/selection.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="selectAll" scope="instance">
				<description>Selects all items</description>
				<parameters>

				<parameter name="from" type="String" usage="required">
					<description>SelectAll(from,to)</description>
				</parameter>

				<parameter name="to" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes data to a json object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showItem" scope="instance">
				<description>Shows the specified item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>ShowItem(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sort" scope="instance">
				<description>Sorts datastore</description>
				<parameters>

				<parameter name="by" type="String" usage="required">
					<description>Sort(by, dir, as)</description>
				</parameter>

				<parameter name="dir" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="as" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sync" scope="instance">
				<description>Allows to sync two copy all, or part of data from one DataCollection to another</description>
				<parameters>

				<parameter name="source" type="String" usage="required">
					<description>Sync(source, filter, silent)</description>
				</parameter>

				<parameter name="filter" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="silent" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="unselect" scope="instance">
				<description>Unselects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Unselect(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unselectAll" scope="instance">
				<description>Unselects all items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="update" scope="instance">
				<description>Sets properties of the data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Update(id,data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.list.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="dataFeed" type="string" scope="instance" access="read-write">
					<description>path to php file that will get data. Used to reload data from server.</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datastore" type="string" scope="instance" access="read-write">
					<description>custom DataStore object</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="scheme" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				

				<property name="select" type="string" scope="instance" access="read-write">
					<description>enables/disables item selection or multiselection in grid</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>object that specifies items list presentation</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.multiview">
	    <description>dhx.ui.multiview</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.multiview"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="back" scope="instance">
				<description>Switches multiview to previously active view</description>
				<parameters>

				<parameter name="step" type="String" usage="required">
					<description>Back(step)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getActive" scope="instance">
				<description>Returns id of currently visible sub-view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="index" scope="instance">
				<description>Returns an index of the currently selected view (index in the array of views)</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Index(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="reconstruct" scope="instance">
				<description>Rebuilds layout</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resizeChildren" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showBatch" scope="instance">
				<description>Makes visible elements which parameter &#039;batch&#039; is set to the specified name</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>ShowBatch(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;toolbar&amp;quot;, type:&amp;quot;top_bar&amp;quot;, visibleBatch:&amp;quot;init&amp;quot;, elements:&amp;#91;&lt;br&gt;						&amp;#123; view:&amp;quot;button&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						&amp;#123; view:&amp;quot;label&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;imagebutton&amp;quot;, ..., batch:&amp;quot;batch_2&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;radio&amp;quot;, id:&amp;quot;batch_name&amp;quot;, value:&amp;quot;batch_2&amp;quot;, options:&amp;#91;&amp;quot;batch_1&amp;quot;, &amp;quot;batch_2&amp;quot;&amp;#93;, click:&amp;quot;change_batch&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;function change_batch&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	var mode = $$&amp;#40;&amp;quot;batch_name&amp;quot;&amp;#41;.getValue&amp;#40;&amp;#41;;&lt;br&gt;	$$&amp;#40;&amp;quot;top_bar&amp;quot;&amp;#41;.showBatch&amp;#40;mode&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.multiview.config">
		<properties>
			
				<property name="animate" type="string" scope="instance" access="read-write">
					<description>defines animation on view change (object with direction, type and subtype properties) or disables animation (false)</description>
				</property>
				

				<property name="cells" type="string" scope="instance" access="read-write">
					<description>the array with views objects</description>
				</property>
				

				<property name="cols" type="string" scope="instance" access="read-write">
					<description>array of views arranged horizontally</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view needs being initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>class name for view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>view gravity (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>view height</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="rows" type="string" scope="instance" access="read-write">
					<description>array of views arranged vertically</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>view width</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.pagelist">
	    <description>dhx.ui.pagelist</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.pagelist"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds item to the store</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj,index)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;Some new text&amp;quot;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//add to the start of list&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;First item&amp;quot;&lt;br&gt;&amp;#125;, 0&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//object can contain any properties&lt;br&gt;$$&amp;#40;'mygrid'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  some:&amp;quot;some string&amp;quot;,&lt;br&gt;  other:123,&lt;br&gt;  complex:&amp;#123;&lt;br&gt;  	contain:&amp;quot;any&amp;quot;,&lt;br&gt;  	content:&amp;quot;inside&amp;quot;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;, 0&amp;#41;;</example>
			</method>
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all items from the component</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="customize" scope="instance">
				<description>Applies new type settings</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Customize(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="dataCount" scope="instance">
				<description>Gets count of items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="exists" scope="instance">
				<description>Checks if the item with such ID exists</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Exists(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="filter" scope="instance">
				<description>Filters data</description>
				<parameters>

				<parameter name="text" type="String" usage="required">
					<description>Filter(text,value,preserve)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="preserve" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example>//filter all with 'abc' in 'text' property&lt;br&gt;list.filter&amp;#40;'#text#',&amp;quot;abc&amp;quot;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//same with filtering function&lt;br&gt;list.filter&amp;#40;function&amp;#40;obj&amp;#41;&amp;#123;&lt;br&gt;	return obj.text.toString&amp;#40;&amp;#41;.indexOf&amp;#40;&amp;quot;abc&amp;quot;&amp;#41; != -1;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Gets the ID of the first item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getActive" scope="instance">
				<description>Returns id of currently visible sub-view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getSelected" scope="instance">
				<description>Returns ID of selected item(s)</description>
				<parameters>

				<parameter name="as_array" type="String" usage="required">
					<description>GetSelected(as_array)</description>
				</parameter>

				</parameters>
				<example>//single select mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = someid&lt;br&gt;&amp;nbsp;&lt;br&gt;//multiselect mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = [someid1, someid2, someid3]</example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="idByIndex" scope="instance">
				<description>Gets the id of an item with taken index</description>
				<parameters>

				<parameter name="index" type="Number" usage="required">
					<description>IdByIndex(index)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="indexById" scope="instance">
				<description>The index of the item in question</description>
				<parameters>

				<parameter name="id" type="Number" usage="required">
					<description>IndexById(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isSelected" scope="instance">
				<description>Checks if item is selected or not</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>IsSelected(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="item" scope="instance">
				<description>Gets the object of a data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Item(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="last" scope="instance">
				<description>Gets the id of the last item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="loadNext" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="count" type="String" usage="required">
					<description>LoadNext(count, start)</description>
				</parameter>

				<parameter name="start" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="locate" scope="instance">
				<description></description>
				<parameters>

				<parameter name="e" type="String" usage="required">
					<description>Locate(e)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="next" scope="instance">
				<description>Gets ID of the next element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Next(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="previous" scope="instance">
				<description>Gets ID of the previous element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Previous(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaint the whole view or a certain item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Refresh(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes element from datastore</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Render(id,data,type)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>File: core/render/render.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="select" scope="instance">
				<description>Selects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Select(id,non_modal,continue_old)</description>
				</parameter>

				<parameter name="non_modal" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="continue_old" type="String" usage="required">
					<description>File: core/selection.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="selectAll" scope="instance">
				<description>Selects all items</description>
				<parameters>

				<parameter name="from" type="String" usage="required">
					<description>SelectAll(from,to)</description>
				</parameter>

				<parameter name="to" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes data to a json object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showItem" scope="instance">
				<description>Shows the specified item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>ShowItem(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sort" scope="instance">
				<description>Sorts datastore</description>
				<parameters>

				<parameter name="by" type="String" usage="required">
					<description>Sort(by, dir, as)</description>
				</parameter>

				<parameter name="dir" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="as" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sync" scope="instance">
				<description>Allows to sync two copy all, or part of data from one DataCollection to another</description>
				<parameters>

				<parameter name="source" type="String" usage="required">
					<description>Sync(source, filter, silent)</description>
				</parameter>

				<parameter name="filter" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="silent" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="unselect" scope="instance">
				<description>Unselects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Unselect(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unselectAll" scope="instance">
				<description>Unselects all items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="update" scope="instance">
				<description>Sets properties of the data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Update(id,data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.pagelist.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="dataFeed" type="string" scope="instance" access="read-write">
					<description>path to php file that will get data. Used to reload data from server.</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datastore" type="string" scope="instance" access="read-write">
					<description>custom DataStore object</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="panel" type="string" scope="instance" access="read-write">
					<description></description>
				</property>
				

				<property name="scheme" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="scrollOffset" type="string" scope="instance" access="read-write">
					<description>defines offset for the scroll stop</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				

				<property name="select" type="string" scope="instance" access="read-write">
					<description>enables/disables item selection or multiselection in grid</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>object that specifies items list presentation</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.popup">
	    <description>dhx.ui.popup</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.popup"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="close" scope="instance">
				<description>Removes a window</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="getBody" scope="instance">
				<description>Gets the ui view of the window body</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getHead" scope="instance">
				<description>Gets the ui view of the window header</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setPosition" scope="instance">
				<description>Sets window&#039;s position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>SetPosition(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.popup.config">
		<properties>
			
				<property name="body" type="string" scope="instance" access="read-write">
					<description>the content of window body: template or view</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="headHeight" type="string" scope="instance" access="read-write">
					<description>defines the header height (43 by default)</description>
				</property>
				

				<property name="head" type="string" scope="instance" access="read-write">
					<description>sets header view</description>
				</property>
				

				<property name="header" type="string" scope="instance" access="read-write">
					<description>the content of window header: template or view</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>window height (200)</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>hides the window initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="left" type="string" scope="instance" access="read-write">
					<description>the left offset of a window (100)</description>
				</property>
				

				<property name="modal" type="string" scope="instance" access="read-write">
					<description>switches window modality</description>
				</property>
				

				<property name="move" type="string" scope="instance" access="read-write">
					<description>makes view movable</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="padding" type="string" scope="instance" access="read-write">
					<description>window padding</description>
				</property>
				

				<property name="position" type="string" scope="instance" access="read-write">
					<description>window position: &#039;top&#039; or &#039;center&#039;</description>
				</property>
				

				<property name="top" type="string" scope="instance" access="read-write">
					<description>the top offset of a window (100)</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>window width (300)</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.radio">
	    <description>dhx.ui.radio</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.radio"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.radio.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.richselect">
	    <description>dhx.ui.richselect</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.richselect"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getList" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.richselect.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="iconCss" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="iconWidth" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="icon" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="options" type="string" scope="instance" access="read-write">
					<description>defines select options of control</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.scrollview">
	    <description>dhx.ui.scrollview</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.scrollview"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.scrollview.config">
		<properties>
			
				<property name="body" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="contentHeight" type="string" scope="instance" access="read-write">
					<description>sets the height of scrollable view, actual for y scrolling</description>
				</property>
				

				<property name="contentWidth" type="string" scope="instance" access="read-write">
					<description>sets the width of scrollable view, actual for x scrolling,</description>
				</property>
				

				<property name="content" type="string" scope="instance" access="read-write">
					<description>the view object that needs being scrolled</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="scrollSpeed" type="string" scope="instance" access="read-write">
					<description>the speed of scrolling (the default speed is &#039;0ms&#039;)</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>sets the type of scrolling (x - horizontal, y - vertical)</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.segmented">
	    <description>dhx.ui.segmented</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.segmented"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.segmented.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.select">
	    <description>dhx.ui.select</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.select"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.select.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.slider">
	    <description>dhx.ui.slider</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.slider"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setSliderTitle" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="title" type="String" usage="required">
					<description>SetSliderTitle(title)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.slider.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="max" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="min" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="step" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.tabbar">
	    <description>dhx.ui.tabbar</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.tabbar"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.tabbar.config">
		<properties>
			
				<property name="cells" type="string" scope="instance" access="read-write">
					<description>the array of views</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.template">
	    <description>dhx.ui.template</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.template"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints the whole view or a certain a item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValues" scope="instance">
				<description>Sets data hash</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>SetValues(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.template.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="content" type="string" scope="instance" access="read-write">
					<description>the id or node, whose content will be moved to the view</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="loading" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				

				<property name="src" type="string" scope="instance" access="read-write">
					<description>path to external template that is loaded by Ajax</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="waitMessage" type="string" scope="instance" access="read-write">
					<description>defines whether the loading cover should be displayed while loading (actual in case of &#039;src&#039; parameter)</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.text">
	    <description>dhx.ui.text</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.text"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.text.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.textarea">
	    <description>dhx.ui.textarea</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.textarea"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.textarea.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="cssContant" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.toggle">
	    <description>dhx.ui.toggle</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.toggle"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Moves focus to the input</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'field_b'&amp;#41;.focus&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getInput" scope="instance">
				<description>Returns input html object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints input</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value for the button</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.toggle.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="labelWidth" type="string" scope="instance" access="read-write">
					<description>width of label</description>
				</property>
				

				<property name="label" type="string" scope="instance" access="read-write">
					<description>text label of control</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="outerPadding" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="popup" type="string" scope="instance" access="read-write">
					<description>allows to attach pop-up menu to the button</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>type of control</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.toolbar">
	    <description>dhx.ui.toolbar</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.toolbar"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clear" scope="instance">
				<description>Clears values of all inputs ( resets them to the default values )</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'from', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'to', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Clear form', click:&amp;quot;clear_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function clear_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'myform'&amp;#41;.clear&amp;#40;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="focus" scope="instance">
				<description>Sets focus to an input</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>Focus(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.focus&amp;#40;&amp;quot;field_a&amp;quot;&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getValues" scope="instance">
				<description>Gets hash of data values</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	rows:&amp;#91;&amp;#123;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'From', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'To', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, id:&amp;quot;button1&amp;quot;, label: 'Show values', click:&amp;quot;get_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;	&amp;#125;,&lt;br&gt;	&amp;#123; id:&amp;quot;log&amp;quot;, template:function&amp;#40;obj&amp;#41;&amp;#123; return &amp;quot;&amp;lt;pre&amp;gt;&amp;quot;+JSON.stringify&amp;#40;obj&amp;#41;.replace&amp;#40;/,/g,&amp;quot;\n,&amp;quot;&amp;#41;+&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;; &amp;#125;&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function get_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'log'&amp;#41;.parse&amp;#40;$$&amp;#40;'myform'&amp;#41;.getValues&amp;#40;&amp;#41;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="index" scope="instance">
				<description>Returns an index of the currently selected view (index in the array of views)</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Index(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="reconstruct" scope="instance">
				<description>Rebuilds layout</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints the whole view or a certain item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="resizeChildren" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValues" scope="instance">
				<description>Sets values for all inputs in the component</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>SetValues(data)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	rows:&amp;#91;&amp;#123;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'from', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'to', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;	&amp;#125;,&lt;br&gt;	&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Fill form', click:&amp;quot;set_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function set_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'myform'&amp;#41;.setValues&amp;#40;&amp;#123;&lt;br&gt;			field_a: &amp;quot;London&amp;quot;,&lt;br&gt;			field_b: &amp;quot;New York&amp;quot;,&lt;br&gt;			field_c: &amp;quot;left&amp;quot;&lt;br&gt;	&amp;#125;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="showBatch" scope="instance">
				<description>Makes visible elements which parameter &#039;batch&#039; is set to the specified name</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>ShowBatch(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;toolbar&amp;quot;, type:&amp;quot;top_bar&amp;quot;, visibleBatch:&amp;quot;init&amp;quot;, elements:&amp;#91;&lt;br&gt;						&amp;#123; view:&amp;quot;button&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						&amp;#123; view:&amp;quot;label&amp;quot;, ..., batch:&amp;quot;batch_1&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;imagebutton&amp;quot;, ..., batch:&amp;quot;batch_2&amp;quot; &amp;#125;,&lt;br&gt;						  ...&lt;br&gt;						&amp;#123; view:&amp;quot;radio&amp;quot;, id:&amp;quot;batch_name&amp;quot;, value:&amp;quot;batch_2&amp;quot;, options:&amp;#91;&amp;quot;batch_1&amp;quot;, &amp;quot;batch_2&amp;quot;&amp;#93;, click:&amp;quot;change_batch&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;function change_batch&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	var mode = $$&amp;#40;&amp;quot;batch_name&amp;quot;&amp;#41;.getValue&amp;#40;&amp;#41;;&lt;br&gt;	$$&amp;#40;&amp;quot;top_bar&amp;quot;&amp;#41;.showBatch&amp;#40;mode&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="validate" scope="instance">
				<description>Validates for the defined rules</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Validate(obj)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, &lt;br&gt;	id:&amp;quot;myform&amp;quot;, &lt;br&gt;	elements:&amp;#91;&lt;br&gt;		&amp;#123; view:&amp;quot;text&amp;quot;, inputWidth:300, label:&amp;quot;Name *&amp;quot;, id:&amp;quot;name&amp;quot;&amp;#125;,&lt;br&gt;		&amp;#123; view:&amp;quot;text&amp;quot;, inputWidth:300, label:&amp;quot;Age *&amp;quot;,  id:&amp;quot;age&amp;quot;&amp;#125;,&lt;br&gt;		&amp;#123; view:&amp;quot;button&amp;quot;, inputWidth:300, label:&amp;quot;Submit&amp;quot;, click:&amp;quot;submit_form&amp;quot;&amp;#125;&amp;#93;,&lt;br&gt;	rules:&amp;#123;&lt;br&gt;		name:dhx.rules.isNotEmpty,&lt;br&gt;		age:dhx.rules.isNumber&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;submit_form = function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;$$&amp;#40;&amp;quot;myform&amp;quot;&amp;#41;.validate&amp;#40;&amp;#41;==false&amp;#41;&lt;br&gt;		&amp;#123;dhx.notice&amp;#40;&amp;quot;Invalid value for some field&amp;quot;&amp;#41;;&amp;#125;&lt;br&gt;&amp;#125;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.toolbar.config">
		<properties>
			
				<property name="cols" type="string" scope="instance" access="read-write">
					<description>array of views arranged horizontally</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view needs being initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>class name for view container</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>view gravity (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>view height</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="rows" type="string" scope="instance" access="read-write">
					<description>array of views arranged vertically</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>the type of toolbar</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>view width</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.video">
	    <description>dhx.ui.video</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.video"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getVideo" scope="instance">
				<description>Gets the video object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.video.config">
		<properties>
			
				<property name="autoplay" type="string" scope="instance" access="read-write">
					<description>defines whether a video file must be played just after initialization, without waiting a button click (false)</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="controls" type="string" scope="instance" access="read-write">
					<description>defines whether a control panel should be displayed (true)</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="src" type="string" scope="instance" access="read-write">
					<description>path to video file</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.view">
	    <description>dhx.ui.view</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.view"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.view.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ui.window">
	    <description>dhx.ui.window</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ui.window"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="close" scope="instance">
				<description>Removes a window</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="getBody" scope="instance">
				<description>Gets the ui view of the window body</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getHead" scope="instance">
				<description>Gets the ui view of the window header</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setPosition" scope="instance">
				<description>Sets window&#039;s position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>SetPosition(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ui.window.config">
		<properties>
			
				<property name="body" type="string" scope="instance" access="read-write">
					<description>the content of window body: template or view</description>
				</property>
				

				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="headHeight" type="string" scope="instance" access="read-write">
					<description>defines the header height (43 by default)</description>
				</property>
				

				<property name="head" type="string" scope="instance" access="read-write">
					<description>sets header view</description>
				</property>
				

				<property name="header" type="string" scope="instance" access="read-write">
					<description>the content of window header: template or view</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>window height (200)</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>hides the window initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="left" type="string" scope="instance" access="read-write">
					<description>the left offset of a window (100)</description>
				</property>
				

				<property name="modal" type="string" scope="instance" access="read-write">
					<description>switches window modality</description>
				</property>
				

				<property name="move" type="string" scope="instance" access="read-write">
					<description>makes view movable</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="position" type="string" scope="instance" access="read-write">
					<description>window position: &#039;top&#039; or &#039;center&#039;</description>
				</property>
				

				<property name="top" type="string" scope="instance" access="read-write">
					<description>the top offset of a window (100)</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>window width (300)</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ActiveContent">
	    <description>dhx.ActiveContent</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ActiveContent"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.ActiveContent.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.AtomDataLoader">
	    <description>dhx.AtomDataLoader</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.AtomDataLoader"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.AtomDataLoader.config">
		<properties>
			
				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.AtomRender">
	    <description>dhx.AtomRender</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.AtomRender"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.AtomRender.config">
		<properties>
			
				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.BaseBind">
	    <description>dhx.BaseBind</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.BaseBind"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.BaseBind.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.BindSource">
	    <description>dhx.BindSource</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.BindSource"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="addBind" scope="instance">
				<description>Adds one more bound target</description>
				<parameters>

				<parameter name="source" type="String" usage="required">
					<description>AddBind(source, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getBindData" scope="instance">
				<description>Fills target object with data</description>
				<parameters>

				<parameter name="key" type="String" usage="required">
					<description>GetBindData(key, update)</description>
				</parameter>

				<parameter name="update" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="saveBatch" scope="instance">
				<description>Makes simultaneous saving several components</description>
				<parameters>

				<parameter name="code" type="String" usage="required">
					<description>SaveBatch(code)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform1'&amp;#41;.bind&amp;#40;'myStore'&amp;#41;;&lt;br&gt;$$&amp;#40;'myform2'&amp;#41;.bind&amp;#40;'myStore'&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myStore'&amp;#41;.saveBatch&amp;#40;function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;        $$&amp;#40;'myform1'&amp;#41;.save&amp;#40;&amp;#41;;&lt;br&gt;        $$&amp;#40;'myform2'&amp;#41;.save&amp;#40;&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="setBindData" scope="instance">
				<description></description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>SetBindData(data, key)</description>
				</parameter>

				<parameter name="key" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.BindSource.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.Canvas">
	    <description>dhx.Canvas</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Canvas"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="clearCanvas" scope="instance">
				<description>Clears canvas</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getCanvas" scope="instance">
				<description>Gets canvas</description>
				<parameters>

				<parameter name="context" type="String" usage="required">
					<description>GetCanvas(context)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="renderText" scope="instance">
				<description>Creates absolutely positioned container</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>RenderText(x,y,text,css,w)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="text" type="String" usage="required">
					<description>File:</description>
				</parameter>

				<parameter name="css" type="String" usage="required">
					<description>Implemented in: Canvas</description>
				</parameter>

				<parameter name="w" type="String" usage="required">
					<description>Included in: chart</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="renderTextAt" scope="instance">
				<description>Creates absolutely positioned container and then align it according to the 1st and 2nd parameters</description>
				<parameters>

				<parameter name="valign" type="String" usage="required">
					<description>RenderTextAt(valign,align, x,y,t,c,w)</description>
				</parameter>

				<parameter name="align" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="x" type="String" usage="required">
					<description>File:</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Implemented in: Canvas</description>
				</parameter>

				<parameter name="t" type="String" usage="required">
					<description>Included in: chart</description>
				</parameter>

				<parameter name="c" type="String" usage="optional">
					<description>Valign - vertical align (optional)</description>
				</parameter>

				<parameter name="w" type="String" usage="optional">
					<description>Align - horizontal align (optional)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.Canvas.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.CanvasMgr">
	    <description>dhx.CanvasMgr</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.CanvasMgr"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="dhxArrowLeft" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="dhxArrowLeftT" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="dhxArrowRight" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="dhxArrowRightT" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.CanvasMgr.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.CarouselPanel">
	    <description>dhx.CarouselPanel</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.CarouselPanel"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.CarouselPanel.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.CollectionBind">
	    <description>dhx.CollectionBind</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.CollectionBind"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="getCursor" scope="instance">
				<description>Gets cursor</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="setCursor" scope="instance">
				<description>Sets cursor to an item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>SetCursor(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.CollectionBind.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.DataCollection">
	    <description>dhx.DataCollection</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DataCollection"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="loadNext" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="count" type="String" usage="required">
					<description>LoadNext(count, start)</description>
				</parameter>

				<parameter name="start" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints the whole view or a certain item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.DataCollection.config">
		<properties>
			
				<property name="dataFeed" type="string" scope="instance" access="read-write">
					<description>path to php file that will get data. Used to reload data from server.</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datastore" type="string" scope="instance" access="read-write">
					<description>custom DataStore object</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="scheme" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.DataDriver">
	    <description>dhx.DataDriver</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DataDriver"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.DataDriver.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.DataLoader">
	    <description>dhx.DataLoader</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DataLoader"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="loadNext" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="count" type="String" usage="required">
					<description>LoadNext(count, start)</description>
				</parameter>

				<parameter name="start" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.DataLoader.config">
		<properties>
			
				<property name="dataFeed" type="string" scope="instance" access="read-write">
					<description>path to php file that will get data. Used to reload data from server.</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datastore" type="string" scope="instance" access="read-write">
					<description>custom DataStore object</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="scheme" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.DataMove">
	    <description>dhx.DataMove</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DataMove"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="copy" scope="instance">
				<description>Copies an item to the same or another object</description>
				<parameters>

				<parameter name="sid" type="Number" usage="required">
					<description>Copy(sid,tindex,tobj,tid)</description>
				</parameter>

				<parameter name="tindex" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="tobj" type="Object" usage="required">
					<description>File: core/move.js</description>
				</parameter>

				<parameter name="tid" type="String" usage="required">
					<description>Implemented in: DataMove</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="externalData" scope="instance">
				<description>Makes data copy</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>ExternalData(data,id)</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="move" scope="instance">
				<description>Moves an item to the new position</description>
				<parameters>

				<parameter name="sid" type="Number" usage="required">
					<description>Move(sid,tindex,tobj,tid)</description>
				</parameter>

				<parameter name="tindex" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="tobj" type="Object" usage="required">
					<description>File: core/move.js</description>
				</parameter>

				<parameter name="tid" type="String" usage="required">
					<description>Implemented in: DataMove</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="moveBottom" scope="instance">
				<description>Moves an item to the last position</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>MoveBottom(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="moveDown" scope="instance">
				<description>Increases item index</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>MoveDown(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="moveTop" scope="instance">
				<description>Moves an item to the first position</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>MoveTop(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="moveUp" scope="instance">
				<description>Decreases item index</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>MoveUp(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.DataMove.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.DataProcessor">
	    <description>dhx.DataProcessor</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DataProcessor"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="escape" scope="instance">
				<description>Sets requests encoding</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>Escape(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="ignore" scope="instance">
				<description>The code that you pass here as the parameter will not react on any data changes (will not be affected by &#039;onStoreUpdated&#039; event handler)</description>
				<parameters>

				<parameter name="code" type="String" usage="required">
					<description>Ignore(code,master)</description>
				</parameter>

				<parameter name="master" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="off" scope="instance">
				<description>Disables dataProcessor</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="on" scope="instance">
				<description>Enables dataProcessor</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="save" scope="instance">
				<description>Allows to save data changes</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Save(id, operation)</description>
				</parameter>

				<parameter name="operation" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="send" scope="instance">
				<description>Sends a request to server. Allows to save data changes on server.</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="validate" scope="instance">
				<description>Validates for the defined rules</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Validate(obj)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, &lt;br&gt;	id:&amp;quot;myform&amp;quot;, &lt;br&gt;	elements:&amp;#91;&lt;br&gt;		&amp;#123; view:&amp;quot;text&amp;quot;, inputWidth:300, label:&amp;quot;Name *&amp;quot;, id:&amp;quot;name&amp;quot;&amp;#125;,&lt;br&gt;		&amp;#123; view:&amp;quot;text&amp;quot;, inputWidth:300, label:&amp;quot;Age *&amp;quot;,  id:&amp;quot;age&amp;quot;&amp;#125;,&lt;br&gt;		&amp;#123; view:&amp;quot;button&amp;quot;, inputWidth:300, label:&amp;quot;Submit&amp;quot;, click:&amp;quot;submit_form&amp;quot;&amp;#125;&amp;#93;,&lt;br&gt;	rules:&amp;#123;&lt;br&gt;		name:dhx.rules.isNotEmpty,&lt;br&gt;		age:dhx.rules.isNumber&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;submit_form = function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;$$&amp;#40;&amp;quot;myform&amp;quot;&amp;#41;.validate&amp;#40;&amp;#41;==false&amp;#41;&lt;br&gt;		&amp;#123;dhx.notice&amp;#40;&amp;quot;Invalid value for some field&amp;quot;&amp;#41;;&amp;#125;&lt;br&gt;&amp;#125;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.DataProcessor.config">
		<properties>
			
				<property name="autoupdate" type="string" scope="instance" access="read-write">
					<description>enables automatic data updating on server while any changes on client-side are done</description>
				</property>
				

				<property name="master" type="string" scope="instance" access="read-write">
					<description>the linked data source. It can be both some independent data source and one of components operated on data (e.g. grid)</description>
				</property>
				

				<property name="mode" type="string" scope="instance" access="read-write">
					<description>type of request</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.DataRecord">
	    <description>dhx.DataRecord</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DataRecord"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="getValues" scope="instance">
				<description>Gets hash of data values</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="setValues" scope="instance">
				<description>Sets values for all inputs in the component</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>SetValues(data)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.DataRecord.config">
		<properties>
			
				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.DataStore">
	    <description>dhx.DataStore</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DataStore"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds item to the store</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj,index)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;Some new text&amp;quot;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//add to the start of list&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  text:&amp;quot;First item&amp;quot;&lt;br&gt;&amp;#125;, 0&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//object can contain any properties&lt;br&gt;$$&amp;#40;'mygrid'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;  some:&amp;quot;some string&amp;quot;,&lt;br&gt;  other:123,&lt;br&gt;  complex:&amp;#123;&lt;br&gt;  	contain:&amp;quot;any&amp;quot;,&lt;br&gt;  	content:&amp;quot;inside&amp;quot;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;, 0&amp;#41;;</example>
			</method>
			<method name="changeId" scope="instance">
				<description>Changes id of the data item</description>
				<parameters>

				<parameter name="old" type="String" usage="required">
					<description>ChangeId(old, newid)</description>
				</parameter>

				<parameter name="newid" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all items from the component</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="dataCount" scope="instance">
				<description>Gets count of items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="each" scope="instance">
				<description>Iterates through collection</description>
				<parameters>

				<parameter name="method" type="String" usage="required">
					<description>Each(method,master)</description>
				</parameter>

				<parameter name="master" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="exists" scope="instance">
				<description>Checks if the item with such ID exists</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Exists(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="filter" scope="instance">
				<description>Filters data</description>
				<parameters>

				<parameter name="text" type="String" usage="required">
					<description>Filter(text,value,preserve)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="preserve" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example>//filter all with 'abc' in 'text' property&lt;br&gt;list.filter&amp;#40;'#text#',&amp;quot;abc&amp;quot;&amp;#41;&lt;br&gt;&amp;nbsp;&lt;br&gt;//same with filtering function&lt;br&gt;list.filter&amp;#40;function&amp;#40;obj&amp;#41;&amp;#123;&lt;br&gt;	return obj.text.toString&amp;#40;&amp;#41;.indexOf&amp;#40;&amp;quot;abc&amp;quot;&amp;#41; != -1;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="first" scope="instance">
				<description>Gets the ID of the first item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getIndexRange" scope="instance">
				<description>Converts the range of indexes to array of all IDs between them</description>
				<parameters>

				<parameter name="from" type="String" usage="required">
					<description>GetIndexRange(from,to)</description>
				</parameter>

				<parameter name="to" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getRange" scope="instance">
				<description>Converts range IDs to array of all IDs between them</description>
				<parameters>

				<parameter name="from" type="String" usage="required">
					<description>GetRange(from,to)</description>
				</parameter>

				<parameter name="to" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="id" scope="instance">
				<description>Gets id of data object</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Id(data)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="idByIndex" scope="instance">
				<description>Gets the id of an item with taken index</description>
				<parameters>

				<parameter name="index" type="Number" usage="required">
					<description>IdByIndex(index)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="indexById" scope="instance">
				<description>The index of the item in question</description>
				<parameters>

				<parameter name="id" type="Number" usage="required">
					<description>IndexById(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="item" scope="instance">
				<description>Gets the object of a data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Item(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="last" scope="instance">
				<description>Gets the id of the last item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="move" scope="instance">
				<description>Moves an item from one position to another</description>
				<parameters>

				<parameter name="sindex" type="Number" usage="required">
					<description>Move(sindex,tindex)</description>
				</parameter>

				<parameter name="tindex" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="next" scope="instance">
				<description>Gets ID of the next element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Next(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="previous" scope="instance">
				<description>Gets ID of the previous element which is positioned in defined step</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Previous(id,step)</description>
				</parameter>

				<parameter name="step" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="provideApi" scope="instance">
				<description>Assigns methods (and events) of DataStore to an object</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>ProvideApi(target,eventable)</description>
				</parameter>

				<parameter name="eventable" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaint the whole view or a certain item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Refresh(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes element from datastore</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="scheme" scope="instance">
				<description>Sets hash of default values for properties</description>
				<parameters>

				<parameter name="config" type="String" usage="required">
					<description>Scheme(config)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.data.scheme&amp;#40;&amp;#123;&lt;br&gt;		name:&amp;quot;unknown&amp;quot;, &lt;br&gt;		sex:&amp;quot;male&amp;quot;,&lt;br&gt;		age:&amp;quot;30&amp;quot;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123;&lt;br&gt;		id:1,&lt;br&gt;		name:&amp;quot;Alex&amp;quot;&lt;br&gt;&amp;#125;&amp;#41;&lt;br&gt;//will add a record:&lt;br&gt;//name:Alex,&lt;br&gt;//sex:male,&lt;br&gt;//age:30</example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes data to a json object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="setDriver" scope="instance">
				<description>Defines type of used data driver</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>SetDriver(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="silent" scope="instance">
				<description>Code that you pass here as the parameter will not be affected by &#039;onStoreUpdated&#039; event handler</description>
				<parameters>

				<parameter name="code" type="String" usage="required">
					<description>Silent(code, master)</description>
				</parameter>

				<parameter name="master" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sort" scope="instance">
				<description>Sorts datastore</description>
				<parameters>

				<parameter name="by" type="String" usage="required">
					<description>Sort(by, dir, as)</description>
				</parameter>

				<parameter name="dir" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="as" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sync" scope="instance">
				<description>Allows to sync two copy all, or part of data from one DataCollection to another</description>
				<parameters>

				<parameter name="source" type="String" usage="required">
					<description>Sync(source, filter, silent)</description>
				</parameter>

				<parameter name="filter" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="silent" type="String" usage="required">
					<description>File: core/datastore.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="update" scope="instance">
				<description>Sets properties of the data item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Update(id,data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.DataStore.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.DataValue">
	    <description>dhx.DataValue</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DataValue"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="getValue" scope="instance">
				<description>Returns current value of control</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints a control</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="setValue" scope="instance">
				<description>Sets a new value of control</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>SetValue(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.DataValue.config">
		<properties>
			
				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.Date">
	    <description>dhx.Date</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Date"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds the number of date units to date</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>Add(date,inc,mode)</description>
				</parameter>

				<parameter name="inc" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="mode" type="String" usage="required">
					<description>File: core/date.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="copy" scope="instance">
				<description>Creates date copy</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>Copy(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="datePart" scope="instance">
				<description>Gets the date part of date object</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>DatePart(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="dateToStr" scope="instance">
				<description>Converts date object to a string in a certain format</description>
				<parameters>

				<parameter name="format" type="String" usage="required">
					<description>DateToStr(format,utc)</description>
				</parameter>

				<parameter name="utc" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="dayStart" scope="instance">
				<description>Gets day start</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>DayStart(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getISOWeek" scope="instance">
				<description></description>
				<parameters>

				<parameter name="ndate" type="String" usage="required">
					<description>GetISOWeek(ndate)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getUTCISOWeek" scope="instance">
				<description></description>
				<parameters>

				<parameter name="ndate" type="String" usage="required">
					<description>GetUTCISOWeek(ndate)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="monthStart" scope="instance">
				<description>Gets the start of the month</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>MonthStart(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="strToDate" scope="instance">
				<description>Convert string to date object</description>
				<parameters>

				<parameter name="format" type="String" usage="required">
					<description>StrToDate(format,utc)</description>
				</parameter>

				<parameter name="utc" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="timePart" scope="instance">
				<description>Gets time part of a date in seconds</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>TimePart(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="weekStart" scope="instance">
				<description>Gets the week start</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>WeekStart(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="yearStart" scope="instance">
				<description>Gets the year start</description>
				<parameters>

				<parameter name="date" type="String" usage="required">
					<description>YearStart(date)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.Date.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.Destruction">
	    <description>dhx.Destruction</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Destruction"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.Destruction.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.DragControl">
	    <description>dhx.DragControl</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DragControl"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="addDrag" scope="instance">
				<description>Registers drag area</description>
				<parameters>

				<parameter name="node" type="String" usage="required">
					<description>AddDrag(node,ctrl)</description>
				</parameter>

				<parameter name="ctrl" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="addDrop" scope="instance">
				<description>Registers drop area</description>
				<parameters>

				<parameter name="node" type="String" usage="required">
					<description>AddDrop(node,ctrl,master_mode)</description>
				</parameter>

				<parameter name="ctrl" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="master_mode" type="String" usage="required">
					<description>File: core/dnd.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="createDrag" scope="instance">
				<description>Called when drag-n-drop is initiated, creates drag representation</description>
				<parameters>

				<parameter name="e" type="String" usage="required">
					<description>CreateDrag(e)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="destroyDrag" scope="instance">
				<description>Called after drag-n-drop, removes all traces and html elements</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getContext" scope="instance">
				<description>Gets drag-n-drop context object</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getMaster" scope="instance">
				<description>Component object or hash code of the control methods</description>
				<parameters>

				<parameter name="t" type="String" usage="required">
					<description>GetMaster(t)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getNode" scope="instance">
				<description>Gets dragged node</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="onDrag" scope="instance">
				<description>Called when drag-n-drop was started and defines dragging behavior</description>
				<parameters>

				<parameter name="s" type="String" usage="required">
					<description>OnDrag(s,e)</description>
				</parameter>

				<parameter name="e" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="onDragIn" scope="instance">
				<description>Called when mouse was moved in drop area and defines marker behavior within the drop area</description>
				<parameters>

				<parameter name="s" type="String" usage="required">
					<description>OnDragIn(s,t,e)</description>
				</parameter>

				<parameter name="t" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="e" type="String" usage="required">
					<description>File: core/dnd.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="onDragOut" scope="instance">
				<description>Called when mouse was moved out drop area and defines marker behavior out of the drop area</description>
				<parameters>

				<parameter name="s" type="String" usage="required">
					<description>OnDragOut(s,t,n,e)</description>
				</parameter>

				<parameter name="t" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="n" type="String" usage="required">
					<description>File: core/dnd.js</description>
				</parameter>

				<parameter name="e" type="String" usage="required">
					<description>Implemented in: DragControl</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="onDrop" scope="instance">
				<description>Called when mouse was released over drop area and defines dropping behavior</description>
				<parameters>

				<parameter name="s" type="String" usage="required">
					<description>OnDrop(s,t,d,e)</description>
				</parameter>

				<parameter name="t" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="d" type="String" usage="required">
					<description>File: core/dnd.js</description>
				</parameter>

				<parameter name="e" type="String" usage="required">
					<description>Implemented in: DragControl</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sendSignal" scope="instance">
				<description>Sets drag-n-drop active state for drag-n-drop context object</description>
				<parameters>

				<parameter name="signal" type="String" usage="required">
					<description>SendSignal(signal)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.DragControl.config">
		<properties>
			
				<property name="drag" type="string" scope="instance" access="read-write">
					<description>enables or disables dnd</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.DragItem">
	    <description>dhx.DragItem</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.DragItem"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.DragItem.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.EditAbility">
	    <description>dhx.EditAbility</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.EditAbility"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="edit" scope="instance">
				<description>Switches item to the edit state</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Edit(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="isEdit" scope="instance">
				<description>Returns id of item in edit state, or null if none</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="stopEdit" scope="instance">
				<description>Switches any item in edit state, back to normal</description>
				<parameters>

				<parameter name="mode" type="String" usage="required">
					<description>StopEdit(mode, if_not_id)</description>
				</parameter>

				<parameter name="if_not_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.EditAbility.config">
		<properties>
			
				<property name="edit" type="string" scope="instance" access="read-write">
					<description>allows or denies edit operations</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.EventSystem">
	    <description>dhx.EventSystem</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.EventSystem"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.EventSystem.config">
		<properties>
			
				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.GlobalStore">
	    <description>dhx.GlobalStore</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.GlobalStore"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.GlobalStore.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.Group">
	    <description>dhx.Group</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Group"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="group" scope="instance">
				<description>Groups data</description>
				<parameters>

				<parameter name="config" type="String" usage="required">
					<description>Group(config,mode)</description>
				</parameter>

				<parameter name="mode" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="ungroup" scope="instance">
				<description>Ungroups data</description>
				<parameters>

				<parameter name="mode" type="String" usage="required">
					<description>Ungroup(mode)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.Group.config">
		<properties>
			
				<property name="group" type="string" scope="instance" access="read-write">
					<description>an object with settings for initial grouping</description>
				</property>
				

				<property name="sort" type="string" scope="instance" access="read-write">
					<description>defines sorting settings</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.GroupStore">
	    <description>dhx.GroupStore</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.GroupStore"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="group" scope="instance">
				<description>Groups data</description>
				<parameters>

				<parameter name="stats" type="String" usage="required">
					<description>Group(stats)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="max" scope="instance">
				<description>Gets the maximum value of a property</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Max(property, data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="min" scope="instance">
				<description>Gets the minimum value of a property</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Min(property, data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="sum" scope="instance">
				<description>Gets the sum of property values</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Sum(property, data)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="ungroup" scope="instance">
				<description>Ungroups data</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.GroupStore.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.IdSpace">
	    <description>dhx.IdSpace</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.IdSpace"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="innerId" scope="instance">
				<description>Returns inner unique id of item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>InnerId(id)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;  view:&amp;quot;window&amp;quot;,&lt;br&gt;  id:&amp;quot;win1&amp;quot;,&lt;br&gt;  body:&amp;quot;&lt;br&gt;        view:&amp;quot;list&amp;quot;, &lt;br&gt;        id:&amp;quot;mylist&amp;quot;,&lt;br&gt;        ...&amp;quot;,&lt;br&gt;  ...&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;dhx.ui&amp;#40;&amp;#123;&lt;br&gt;  view:&amp;quot;window&amp;quot;,&lt;br&gt;  id:&amp;quot;win2&amp;quot;,&lt;br&gt;  body:&amp;quot;&lt;br&gt;        view:&amp;quot;list&amp;quot;, &lt;br&gt;        id:&amp;quot;mylist&amp;quot;,&lt;br&gt;        ...&amp;quot;,&lt;br&gt;  ...&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.IdSpace.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.KeyEvents">
	    <description>dhx.KeyEvents</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.KeyEvents"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.KeyEvents.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.LinkedPanel">
	    <description>dhx.LinkedPanel</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.LinkedPanel"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.LinkedPanel.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.Modality">
	    <description>dhx.Modality</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Modality"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.Modality.config">
		<properties>
			
				<property name="modal" type="string" scope="instance" access="read-write">
					<description>switches window modality</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.MouseEvents">
	    <description>dhx.MouseEvents</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.MouseEvents"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.MouseEvents.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.Movable">
	    <description>dhx.Movable</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Movable"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.Movable.config">
		<properties>
			
				<property name="move" type="string" scope="instance" access="read-write">
					<description>makes view movable</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.Number">
	    <description>dhx.Number</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Number"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="format" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>Format(value, config)</description>
				</parameter>

				<parameter name="config" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="numToStr" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="config" type="String" usage="required">
					<description>NumToStr(config)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.Number.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.PowerArray">
	    <description>dhx.PowerArray</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.PowerArray"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="each" scope="instance">
				<description>Executes a method for each element of an array</description>
				<parameters>

				<parameter name="functor" type="String" usage="required">
					<description>Each(functor,master)</description>
				</parameter>

				<parameter name="master" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="find" scope="instance">
				<description>Gets the index of an element in an array</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Find(data)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="insertAt" scope="instance">
				<description>Adds an element in a collection at a specific position</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>InsertAt(data,pos)</description>
				</parameter>

				<parameter name="pos" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="map" scope="instance">
				<description>Creates a new array from data source, by using results of functor</description>
				<parameters>

				<parameter name="functor" type="String" usage="required">
					<description>Map(functor,master)</description>
				</parameter>

				<parameter name="master" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes an element from an array</description>
				<parameters>

				<parameter name="value" type="String" usage="required">
					<description>Remove(value)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="removeAt" scope="instance">
				<description>Removes one or more elements from a specified position</description>
				<parameters>

				<parameter name="pos" type="String" usage="required">
					<description>RemoveAt(pos,len)</description>
				</parameter>

				<parameter name="len" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.PowerArray.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.RecordBind">
	    <description>dhx.RecordBind</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.RecordBind"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.RecordBind.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.RenderStack">
	    <description>dhx.RenderStack</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.RenderStack"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="customize" scope="instance">
				<description>Applies new type settings</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Customize(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="locate" scope="instance">
				<description></description>
				<parameters>

				<parameter name="e" type="String" usage="required">
					<description>Locate(e)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Render(id,data,type)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>File: core/render/render.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="showItem" scope="instance">
				<description>Shows the specified item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>ShowItem(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.RenderStack.config">
		<properties>
			
				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="type" type="string" scope="instance" access="read-write">
					<description>object that specifies items list presentation</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.RenderType">
	    <description>dhx.RenderType</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.RenderType"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.RenderType.config">
		<properties>
			
				<property name="type" type="string" scope="instance" access="read-write">
					<description>type name or an object that defines Type properties</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.Scrollable">
	    <description>dhx.Scrollable</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Scrollable"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.Scrollable.config">
		<properties>
			
				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.SelectionModel">
	    <description>dhx.SelectionModel</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.SelectionModel"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="getSelected" scope="instance">
				<description>Returns ID of selected item(s)</description>
				<parameters>

				<parameter name="as_array" type="String" usage="required">
					<description>GetSelected(as_array)</description>
				</parameter>

				</parameters>
				<example>//single select mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = someid&lt;br&gt;&amp;nbsp;&lt;br&gt;//multiselect mode&lt;br&gt;var id = list.getSelected&amp;#40;&amp;#41;; // id = [someid1, someid2, someid3]</example>
			</method>
			<method name="isSelected" scope="instance">
				<description>Checks if item is selected or not</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>IsSelected(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="select" scope="instance">
				<description>Selects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Select(id,non_modal,continue_old)</description>
				</parameter>

				<parameter name="non_modal" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="continue_old" type="String" usage="required">
					<description>File: core/selection.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="selectAll" scope="instance">
				<description>Selects all items</description>
				<parameters>

				<parameter name="from" type="String" usage="required">
					<description>SelectAll(from,to)</description>
				</parameter>

				<parameter name="to" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unselect" scope="instance">
				<description>Unselects item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Unselect(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unselectAll" scope="instance">
				<description>Unselects all items</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.SelectionModel.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.Settings">
	    <description>dhx.Settings</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Settings"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.Settings.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.SingleRender">
	    <description>dhx.SingleRender</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.SingleRender"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="customize" scope="instance">
				<description>Applies new type settings</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Customize(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.SingleRender.config">
		<properties>
			
				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.Template">
	    <description>dhx.Template</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Template"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="adjust" scope="instance">
				<description></description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="bind" scope="instance">
				<description>Binds components</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>Bind(target, rule, format)</description>
				</parameter>

				<parameter name="rule" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="format" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.bind&amp;#40;'form1', function&amp;#40;list_data, form_data&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;!form_data&amp;#41; return false;&lt;br&gt;	return list_data.some_property == form_data.some_property;&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="define" scope="instance">
				<description>Sets configuration property or a hash of properties</description>
				<parameters>

				<parameter name="property" type="String" usage="required">
					<description>Define(property, value)</description>
				</parameter>

				<parameter name="value" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>//redefine data url&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.define&amp;#40;&amp;quot;url&amp;quot;, &amp;quot;new_data.xml&amp;quot;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;//change label of button&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.define&amp;#40;&amp;quot;label&amp;quot;, &amp;quot;New value&amp;quot;&amp;#41;;&lt;br&gt;$$&amp;#40;'button1'&amp;#41;.refresh;</example>
			</method>
			<method name="destructor" scope="instance">
				<description>Destructs an object</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;,&lt;br&gt;	id:&amp;quot;myform&amp;quot;,&lt;br&gt;        elements:&amp;#91;...&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;...&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.destructor&amp;#40;&amp;#41;;</example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="getNode" scope="instance">
				<description>Returns main html container of view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="getParent" scope="instance">
				<description>Returns parent object of current view</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hide" scope="instance">
				<description>Hides view</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.hide&amp;#40;&amp;#41;;</example>
			</method>
			<method name="isVisible" scope="instance">
				<description>Returns true if current view is visible</description>
				<parameters>

				<parameter name="base_id" type="String" usage="required">
					<description>IsVisible(base_id, prev_id)</description>
				</parameter>

				<parameter name="prev_id" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'myform'&amp;#41;.isVisible&amp;#40;&amp;#41;;</example>
			</method>
			<method name="load" scope="instance">
				<description>Loads values from external datasource</description>
				<parameters>

				<parameter name="url" type="String" usage="required">
					<description>Load(url,call)</description>
				</parameter>

				<parameter name="call" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'component_id'&amp;#41;.load&amp;#40;&amp;quot;some/path/data.json&amp;quot;&amp;#41;;</example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="parse" scope="instance">
				<description>Addes data from a datasource</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>Parse(data,type)</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="refresh" scope="instance">
				<description>Repaints the whole view or a certain a item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="render" scope="instance">
				<description>Renders a single item</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="resize" scope="instance">
				<description>Adjusts view to the new size</description>
				<parameters>

				<parameter name="force" type="String" usage="required">
					<description>Resize(force)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="scrollState" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="scrollTo" scope="instance">
				<description>Scrolls data container to a certain position</description>
				<parameters>

				<parameter name="x" type="String" usage="required">
					<description>ScrollTo(x,y)</description>
				</parameter>

				<parameter name="y" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="setValues" scope="instance">
				<description>Sets data hash</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>SetValues(obj)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Makes view visible</description>
				<parameters>

				<parameter name="animate_settings" type="String" usage="required">
					<description>Show(animate_settings)</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;'mygrid'&amp;#41;.show&amp;#40;&amp;#41;; &lt;br&gt;&amp;nbsp;&lt;br&gt;// just for mutliview&lt;br&gt;$$&amp;#40;'multiview_id'&amp;#41;.show&amp;#40;&amp;#123;type:&amp;quot;flip&amp;quot;, subtype:&amp;quot;horizontal&amp;quot;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.Template.config">
		<properties>
			
				<property name="container" type="string" scope="instance" access="read-write">
					<description>html container or its id where view will be initialized</description>
				</property>
				

				<property name="content" type="string" scope="instance" access="read-write">
					<description>the id or node, whose content will be moved to the view</description>
				</property>
				

				<property name="css" type="string" scope="instance" access="read-write">
					<description>css class for a view container</description>
				</property>
				

				<property name="data" type="string" scope="instance" access="read-write">
					<description>loaded data</description>
				</property>
				

				<property name="datatype" type="string" scope="instance" access="read-write">
					<description>type of loaded data</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>defines the space width proportions (1 by default)</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>height of view</description>
				</property>
				

				<property name="hidden" type="string" scope="instance" access="read-write">
					<description>sets whether a view will be hidden initially</description>
				</property>
				

				<property name="id" type="string" scope="instance" access="read-write">
					<description>view id</description>
				</property>
				

				<property name="loading" type="string" scope="instance" access="read-write">
					<description>unknown</description>
				</property>
				

				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				

				<property name="scroll" type="string" scope="instance" access="read-write">
					<description>enables/disables scroll</description>
				</property>
				

				<property name="src" type="string" scope="instance" access="read-write">
					<description>path to external template that is loaded by Ajax</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>item template</description>
				</property>
				

				<property name="url" type="string" scope="instance" access="read-write">
					<description>data url</description>
				</property>
				

				<property name="waitMessage" type="string" scope="instance" access="read-write">
					<description>defines whether the loading cover should be displayed while loading (actual in case of &#039;src&#039; parameter)</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>width of view</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.Touch">
	    <description>dhx.Touch</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Touch"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="disable" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="enable" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.Touch.config">
		<properties>
			
				<property name="deltaStep" type="string" scope="instance" access="read-write">
					<description>in order to movement will be interpreted as scrolling or swapping, you should drag finger over the distance defined by this parameter (by default 30 millimeters)</description>
				</property>
				

				<property name="finish" type="string" scope="instance" access="read-write">
					<description>the duration of scrolling after you lifted fingers up (1500)</description>
				</property>
				

				<property name="gravity" type="string" scope="instance" access="read-write">
					<description>the force of gravity (500)</description>
				</property>
				

				<property name="longTouchDelay" type="string" scope="instance" access="read-write">
					<description>the duration of touching in milliseconds to fire longTouch event (1000)</description>
				</property>
				

				<property name="stepSize" type="string" scope="instance" access="read-write">
					<description></description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.TouchEvents">
	    <description>dhx.TouchEvents</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.TouchEvents"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="swipe" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Swipe(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unSwipe" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.TouchEvents.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.TreeDataMove">
	    <description>dhx.TreeDataMove</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.TreeDataMove"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.TreeDataMove.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.TreeRenderStack">
	    <description>dhx.TreeRenderStack</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.TreeRenderStack"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.TreeRenderStack.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.TreeStore">
	    <description>dhx.TreeStore</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.TreeStore"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="add" scope="instance">
				<description>Adds a new item into a certain branch</description>
				<parameters>

				<parameter name="obj" type="Number" usage="required">
					<description>Add(obj, index, parent)</description>
				</parameter>

				<parameter name="index" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="parent" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="branchIndex" scope="instance">
				<description>Gets position of the item in the parent branch</description>
				<parameters>

				<parameter name="parent" type="String" usage="required">
					<description>BranchIndex(parent, child)</description>
				</parameter>

				<parameter name="child" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="clearAll" scope="instance">
				<description>Removes all data</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="eachChild" scope="instance">
				<description>Calls the defined functor for each child node of a certain branch</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>EachChild(id, functor)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="extraParser" scope="instance">
				<description>Addes data from data source</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>ExtraParser(data, parent, level)</description>
				</parameter>

				<parameter name="parent" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="level" type="String" usage="required">
					<description>File:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="firstChild" scope="instance">
				<description>Gets the id of the first child in a certain branch</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>FirstChild(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="getTopRange" scope="instance">
				<description>Gets all ids of all child nodes in the top level</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="groupBy" scope="instance">
				<description>Some unknown method</description>
				<parameters>

				<parameter name="_scheme" type="String" usage="required">
					<description>GroupBy(_scheme, pull, inner_call, parent, level)</description>
				</parameter>

				<parameter name="pull" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="inner_call" type="String" usage="required">
					<description>File:</description>
				</parameter>

				<parameter name="parent" type="String" usage="required">
					<description>Implemented in: TreeStore</description>
				</parameter>

				<parameter name="level" type="String" usage="required">
					<description>Included in:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hasChild" scope="instance">
				<description>Checks whether an item exists in a certain branch (at any level)</description>
				<parameters>

				<parameter name="parent" type="String" usage="required">
					<description>HasChild(parent, child)</description>
				</parameter>

				<parameter name="child" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="nextSibling" scope="instance">
				<description>Gets the id of the next item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>NextSibling(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="parent" scope="instance">
				<description>Gets the id of the parent branch</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Parent(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="prevSibling" scope="instance">
				<description>Gets the id of the previous item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>PrevSibling(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="provideApi" scope="instance">
				<description>Assigns methods (and events) of DataStore to an object</description>
				<parameters>

				<parameter name="target" type="String" usage="required">
					<description>ProvideApi(target,eventable)</description>
				</parameter>

				<parameter name="eventable" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="remove" scope="instance">
				<description>Removes an item</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Remove(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="serialize" scope="instance">
				<description>Serializes branch or the whole dataset to a json object</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Serialize(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.TreeStore.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.Type">
	    <description>dhx.Type</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Type"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.Type.config">
		<properties>
			
				<property name="css" type="string" scope="instance" access="read-write">
					<description>Css class of single item</description>
				</property>
				

				<property name="height" type="string" scope="instance" access="read-write">
					<description>item height</description>
				</property>
				

				<property name="margin" type="string" scope="instance" access="read-write">
					<description>item margin</description>
				</property>
				

				<property name="name" type="string" scope="instance" access="read-write">
					<description>Name of type</description>
				</property>
				

				<property name="padding" type="string" scope="instance" access="read-write">
					<description>Css class of single item</description>
				</property>
				

				<property name="template" type="string" scope="instance" access="read-write">
					<description>Main template</description>
				</property>
				

				<property name="template_edit" type="string" scope="instance" access="read-write">
					<description>Edit template</description>
				</property>
				

				<property name="template_loading" type="string" scope="instance" access="read-write">
					<description>Loading template</description>
				</property>
				

				<property name="width" type="string" scope="instance" access="read-write">
					<description>item width</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.ValidateData">
	    <description>dhx.ValidateData</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ValidateData"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="validate" scope="instance">
				<description>Validates for the defined rules</description>
				<parameters>

				<parameter name="obj" type="Object" usage="required">
					<description>Validate(obj)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, &lt;br&gt;	id:&amp;quot;myform&amp;quot;, &lt;br&gt;	elements:&amp;#91;&lt;br&gt;		&amp;#123; view:&amp;quot;text&amp;quot;, inputWidth:300, label:&amp;quot;Name *&amp;quot;, id:&amp;quot;name&amp;quot;&amp;#125;,&lt;br&gt;		&amp;#123; view:&amp;quot;text&amp;quot;, inputWidth:300, label:&amp;quot;Age *&amp;quot;,  id:&amp;quot;age&amp;quot;&amp;#125;,&lt;br&gt;		&amp;#123; view:&amp;quot;button&amp;quot;, inputWidth:300, label:&amp;quot;Submit&amp;quot;, click:&amp;quot;submit_form&amp;quot;&amp;#125;&amp;#93;,&lt;br&gt;	rules:&amp;#123;&lt;br&gt;		name:dhx.rules.isNotEmpty,&lt;br&gt;		age:dhx.rules.isNumber&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;submit_form = function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	if &amp;#40;$$&amp;#40;&amp;quot;myform&amp;quot;&amp;#41;.validate&amp;#40;&amp;#41;==false&amp;#41;&lt;br&gt;		&amp;#123;dhx.notice&amp;#40;&amp;quot;Invalid value for some field&amp;quot;&amp;#41;;&amp;#125;&lt;br&gt;&amp;#125;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.ValidateData.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.ValueBind">
	    <description>dhx.ValueBind</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.ValueBind"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.ValueBind.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.Values">
	    <description>dhx.Values</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.Values"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="clear" scope="instance">
				<description>Clears values of all inputs ( resets them to the default values )</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'from', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'to', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Clear form', click:&amp;quot;clear_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function clear_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'myform'&amp;#41;.clear&amp;#40;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="focus" scope="instance">
				<description>Sets focus to an input</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>Focus(name)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'Username', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'Password', labelWidth:100&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Log in'&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;$$&amp;#40;'myform'&amp;#41;.focus&amp;#40;&amp;quot;field_a&amp;quot;&amp;#41;;</example>
			</method>
			<method name="getValues" scope="instance">
				<description>Gets hash of data values</description>
				<parameters>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	rows:&amp;#91;&amp;#123;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'From', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'To', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;button&amp;quot;, id:&amp;quot;button1&amp;quot;, label: 'Show values', click:&amp;quot;get_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;	&amp;#125;,&lt;br&gt;	&amp;#123; id:&amp;quot;log&amp;quot;, template:function&amp;#40;obj&amp;#41;&amp;#123; return &amp;quot;&amp;lt;pre&amp;gt;&amp;quot;+JSON.stringify&amp;#40;obj&amp;#41;.replace&amp;#40;/,/g,&amp;quot;\n,&amp;quot;&amp;#41;+&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;; &amp;#125;&amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function get_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'log'&amp;#41;.parse&amp;#40;$$&amp;#40;'myform'&amp;#41;.getValues&amp;#40;&amp;#41;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
			<method name="setValues" scope="instance">
				<description>Sets values for all inputs in the component</description>
				<parameters>

				<parameter name="data" type="String" usage="required">
					<description>SetValues(data)</description>
				</parameter>

				</parameters>
				<example>dhx.ui&amp;#40;&amp;#123;&lt;br&gt;	rows:&amp;#91;&amp;#123;	view:&amp;quot;form&amp;quot;, id:&amp;quot;myform&amp;quot;, elements:&amp;#91;&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_a', label: 'from', value: &amp;quot;Madrid&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;text&amp;quot;, id:'field_b', label: 'to', value: &amp;quot;Milan&amp;quot;&amp;#125;,&lt;br&gt;			&amp;#123; view:&amp;quot;toggle&amp;quot;, id:'field_c', options: &amp;#91;&amp;quot;Roundtrip&amp;quot;,&amp;quot;Oneway&amp;quot;&amp;#93;, align: &amp;quot;center&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;	&amp;#125;,&lt;br&gt;	&amp;#123; view:&amp;quot;button&amp;quot;, label: 'Fill form', click:&amp;quot;set_form&amp;quot; &amp;#125;&amp;#93;&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;&amp;nbsp;&lt;br&gt;function set_form&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;	$$&amp;#40;'myform'&amp;#41;.setValues&amp;#40;&amp;#123;&lt;br&gt;			field_a: &amp;quot;London&amp;quot;,&lt;br&gt;			field_b: &amp;quot;New York&amp;quot;,&lt;br&gt;			field_c: &amp;quot;left&amp;quot;&lt;br&gt;	&amp;#125;&amp;#41;;&lt;br&gt;&amp;#125;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.Values.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.VirtualRenderStack">
	    <description>dhx.VirtualRenderStack</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.VirtualRenderStack"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="render" scope="instance">
				<description>Renders a current state of an item or the whole component</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Render(id,data,type)</description>
				</parameter>

				<parameter name="data" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="type" type="String" usage="required">
					<description>File: core/render/virtual_render.js</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="show" scope="instance">
				<description>Adjusts scroll state to show an item in question</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>Show(id)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.VirtualRenderStack.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.history">
	    <description>dhx.history</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.history"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="active" scope="instance">
				<description>Checks whether history storing is activated</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="ignore" scope="instance">
				<description>Says to ignore the specified multiview tabs while storing history</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="reset" scope="instance">
				<description>Clears all the stored history and stops further storing for all the activated multiviews</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="start" scope="instance">
				<description>Starts storing tabs history</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="stop" scope="instance">
				<description>Pauses storing tabs history</description>
				<parameters>

				</parameters>
				<example></example>
			</method>
			<method name="unignore" scope="instance">
				<description>Resumes storing history of an ignored tab</description>
				<parameters>

				<parameter name="name" type="String" usage="required">
					<description>Unignore(name)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
		</methods>
	</class>
	<class type="dhx.history.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.proxy">
	    <description>dhx.proxy</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.proxy"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
			<method name="attachEvent" scope="instance">
				<description>Attaches custom handler to inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>AttachEvent(type,functor,id)</description>
				</parameter>

				<parameter name="functor" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="id" type="String" usage="required">
					<description>File: core/dhx.js</description>
				</parameter>

				</parameters>
				<example>$$&amp;#40;&amp;quot;menu&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onXLE&amp;quot;,function&amp;#40;&amp;#41;&amp;#123;&lt;br&gt;				this.select&amp;#40;2&amp;#41;;&lt;br&gt;&amp;#125;&amp;#41;</example>
			</method>
			<method name="blockEvent" scope="instance">
				<description>Blocks event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'list'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'list'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'list'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
			<method name="callEvent" scope="instance">
				<description>Calls inner event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>CallEvent(type,params)</description>
				</parameter>

				<parameter name="params" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="detachEvent" scope="instance">
				<description>Detaches custom code from handler</description>
				<parameters>

				<parameter name="id" type="String" usage="required">
					<description>DetachEvent(id)</description>
				</parameter>

				</parameters>
				<example>var myEvent = $$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.attachEvent&amp;#40;&amp;quot;onItemClick&amp;quot;, function &amp;#40;&amp;#41;&amp;#123;&lt;br&gt;    ...//event handler code&lt;br&gt;&amp;#125;&amp;#41;;&lt;br&gt;...&lt;br&gt;$$&amp;#40;&amp;quot;mylist&amp;quot;&amp;#41;.detachEvent&amp;#40;myEvent&amp;#41;;</example>
			</method>
			<method name="get" scope="instance">
				<description>Sends a request of the type GET</description>
				<parameters>

				<parameter name="params" type="String" usage="required">
					<description>Get(params, callback)</description>
				</parameter>

				<parameter name="callback" type="Function" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="hasEvent" scope="instance">
				<description>Checks whether a component has an event</description>
				<parameters>

				<parameter name="type" type="String" usage="required">
					<description>HasEvent(type)</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="load" scope="instance">
				<description>Loads data from the specified url via proxy</description>
				<parameters>

				<parameter name="dest" type="String" usage="required">
					<description>Load(dest, driver)</description>
				</parameter>

				<parameter name="driver" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="mapEvent" scope="instance">
				<description>Routes events from one object to another</description>
				<parameters>

				<parameter name="map" type="String" usage="required">
					<description>MapEvent(map)</description>
				</parameter>

				</parameters>
				<example>//as result , buttons event will fire for list component&lt;br&gt;button.mapEvent&amp;#40;&amp;#123;&lt;br&gt;	onItemClick:list // where list - some other component&lt;br&gt;&amp;#125;&amp;#41;;</example>
			</method>
			<method name="post" scope="instance">
				<description>Sends a request of the type POST</description>
				<parameters>

				<parameter name="params" type="String" usage="required">
					<description>Post(params, callback)</description>
				</parameter>

				<parameter name="callback" type="Function" usage="required">
					<description>Type: Method</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="restore" scope="instance">
				<description>Restores data from the cache into the specified datastore</description>
				<parameters>

				<parameter name="dest" type="String" usage="required">
					<description>Restore(dest, driver, text, xml, XmlHttpRequest)</description>
				</parameter>

				<parameter name="driver" type="String" usage="required">
					<description>Type: Method</description>
				</parameter>

				<parameter name="text" type="String" usage="required">
					<description>File:</description>
				</parameter>

				<parameter name="xml" type="String" usage="required">
					<description>Implemented in: proxy</description>
				</parameter>

				<parameter name="XmlHttpRequest" type="String" usage="required">
					<description>Included in:</description>
				</parameter>

				</parameters>
				<example></example>
			</method>
			<method name="unblockEvent" scope="instance">
				<description>Enables event triggering</description>
				<parameters>

				</parameters>
				<example>$$&amp;#40;'mylist'&amp;#41;.blockEvent&amp;#40;&amp;#41;;&lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.add&amp;#40;&amp;#123; text:'abc'&amp;#125;&amp;#41;; //will not trigger any events &lt;br&gt;$$&amp;#40;'mylist'&amp;#41;.unblockEvent&amp;#40;&amp;#41;;</example>
			</method>
		</methods>
	</class>
	<class type="dhx.proxy.config">
		<properties>
			
				<property name="on" type="string" scope="instance" access="read-write">
					<description>allows to attach custom handlers to inner events of the component</description>
				</property>
				
		</properties>
	</class>
	<class type="dhx.storagecookie">
	    <description>dhx.storagecookie</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.storagecookie"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.storagecookie.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.storagelocal">
	    <description>dhx.storagelocal</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.storagelocal"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.storagelocal.config">
		<properties>
			
		</properties>
	</class>
	<class type="dhx.storagesession">
	    <description>dhx.storagesession</description>
	    <constructors>
		    
			<constructor scope="static">
		        <description>.</description>
				<parameters>
		        </parameters>
		        <return-types>
		            <return-type type="dhx.storagesession"/>
		        </return-types>
		    </constructor>
	    </constructors>
	    <methods>
			
		</methods>
	</class>
	<class type="dhx.storagesession.config">
		<properties>
			
		</properties>
	</class>
</javascript>